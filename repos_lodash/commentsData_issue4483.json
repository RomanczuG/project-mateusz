[
  {
    "url": "https://api.github.com/repos/lodash/lodash/issues/comments/535392766",
    "html_url": "https://github.com/lodash/lodash/issues/4483#issuecomment-535392766",
    "issue_url": "https://api.github.com/repos/lodash/lodash/issues/4483",
    "id": 535392766,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzNTM5Mjc2Ng==",
    "user": {
      "login": "jdalton",
      "id": 4303,
      "node_id": "MDQ6VXNlcjQzMDM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4303?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jdalton",
      "html_url": "https://github.com/jdalton",
      "followers_url": "https://api.github.com/users/jdalton/followers",
      "following_url": "https://api.github.com/users/jdalton/following{/other_user}",
      "gists_url": "https://api.github.com/users/jdalton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jdalton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jdalton/subscriptions",
      "organizations_url": "https://api.github.com/users/jdalton/orgs",
      "repos_url": "https://api.github.com/users/jdalton/repos",
      "events_url": "https://api.github.com/users/jdalton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jdalton/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-09-26T08:12:49Z",
    "updated_at": "2019-09-26T08:12:49Z",
    "author_association": "MEMBER",
    "body": "Hi @AndresCardonaDev!\r\n\r\nOur parser is a little forgiving when it comes to malformed paths. Rather than throw an error we try to complete the path. In this case `[]]` is seen as garbage and ignored.",
    "reactions": {
      "url": "https://api.github.com/repos/lodash/lodash/issues/comments/535392766/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/lodash/lodash/issues/comments/535543805",
    "html_url": "https://github.com/lodash/lodash/issues/4483#issuecomment-535543805",
    "issue_url": "https://api.github.com/repos/lodash/lodash/issues/4483",
    "id": 535543805,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzNTU0MzgwNQ==",
    "user": {
      "login": "AndresCardonaDev",
      "id": 28909887,
      "node_id": "MDQ6VXNlcjI4OTA5ODg3",
      "avatar_url": "https://avatars.githubusercontent.com/u/28909887?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AndresCardonaDev",
      "html_url": "https://github.com/AndresCardonaDev",
      "followers_url": "https://api.github.com/users/AndresCardonaDev/followers",
      "following_url": "https://api.github.com/users/AndresCardonaDev/following{/other_user}",
      "gists_url": "https://api.github.com/users/AndresCardonaDev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AndresCardonaDev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AndresCardonaDev/subscriptions",
      "organizations_url": "https://api.github.com/users/AndresCardonaDev/orgs",
      "repos_url": "https://api.github.com/users/AndresCardonaDev/repos",
      "events_url": "https://api.github.com/users/AndresCardonaDev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AndresCardonaDev/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-09-26T14:57:30Z",
    "updated_at": "2019-09-26T14:57:47Z",
    "author_association": "NONE",
    "body": "@jdalton Saw the code, got that idea somehow, but wouldn't this diminish the role of the defaultValue parameter?,\r\nA line of code like the following is telling me that i shouldn't worry i can rely in the default value if something doesn't make sense, in my case someone entered `]` by accident, that wouldn't happen with any other param and is where i find that doesn't look consistent. In conclusion, one can't rely in this code then\r\n```js\r\n_.get({a:{b:{c:'Spanish Inquisition'}}}, `a[${x}][${y}]`, 'No worries')\r\n```\r\n\r\nfor example if we try then with another 'valid' garbage\r\n`_.get({a:{b:{c:'Spanish Inquisition'}}}, 'a...', 'No worries')`It will return undefined, which is more clear to be expected\r\n\r\nTherefore its a pretty selective garbage allowance system :D, brackets are fine, wait a minute are you a dot!\r\n\r\nJust though in something simple to keep things coherent won't you agree?\r\n```js\r\nfunction _toOnlyBrackets(path)  {\r\n  return path.replace(/[^\\[\\]]/g, '')\r\n}\r\nfunction _areBracketsBalanced(onlyBracketsPath){\r\n  if (onlyBracketsPath.length === 0) {\r\n    return true;\r\n  }\r\n  if (onlyBracketsPath.length % 2 === 1){\r\n    return false;\r\n  }\r\n  if (onlyBracketsPath[0] === \"]\") {\r\n    return false\r\n  }\r\n  let stack = _.reduce(onlyBracketsPath, (stack, bracket) => {\r\n    bracket === ']' ? stack.pop() : stack.push(bracket)\r\n    return stack\r\n  }, []);\r\n  return _.isEmpty(stack)\r\n}\r\n\r\nif (!_areBracketsBalanced(_toOnlyBrackets(path)) {\r\n return undefined\r\n}\r\n```\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/lodash/lodash/issues/comments/535543805/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
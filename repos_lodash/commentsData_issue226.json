[
  {
    "url": "https://api.github.com/repos/lodash/lodash/issues/comments/15686399",
    "html_url": "https://github.com/lodash/lodash/issues/226#issuecomment-15686399",
    "issue_url": "https://api.github.com/repos/lodash/lodash/issues/226",
    "id": 15686399,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1Njg2Mzk5",
    "user": {
      "login": "jdalton",
      "id": 4303,
      "node_id": "MDQ6VXNlcjQzMDM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4303?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jdalton",
      "html_url": "https://github.com/jdalton",
      "followers_url": "https://api.github.com/users/jdalton/followers",
      "following_url": "https://api.github.com/users/jdalton/following{/other_user}",
      "gists_url": "https://api.github.com/users/jdalton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jdalton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jdalton/subscriptions",
      "organizations_url": "https://api.github.com/users/jdalton/orgs",
      "repos_url": "https://api.github.com/users/jdalton/repos",
      "events_url": "https://api.github.com/users/jdalton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jdalton/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-03-31T03:56:27Z",
    "updated_at": "2013-03-31T03:56:40Z",
    "author_association": "MEMBER",
    "body": "``` js\nvar a = {};a.__proto__ = [];Object.keys(a);\n// => [] which is expected.\n```\n",
    "reactions": {
      "url": "https://api.github.com/repos/lodash/lodash/issues/comments/15686399/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/lodash/lodash/issues/comments/15686427",
    "html_url": "https://github.com/lodash/lodash/issues/226#issuecomment-15686427",
    "issue_url": "https://api.github.com/repos/lodash/lodash/issues/226",
    "id": 15686427,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1Njg2NDI3",
    "user": {
      "login": "WebReflection",
      "id": 85749,
      "node_id": "MDQ6VXNlcjg1NzQ5",
      "avatar_url": "https://avatars.githubusercontent.com/u/85749?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/WebReflection",
      "html_url": "https://github.com/WebReflection",
      "followers_url": "https://api.github.com/users/WebReflection/followers",
      "following_url": "https://api.github.com/users/WebReflection/following{/other_user}",
      "gists_url": "https://api.github.com/users/WebReflection/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/WebReflection/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/WebReflection/subscriptions",
      "organizations_url": "https://api.github.com/users/WebReflection/orgs",
      "repos_url": "https://api.github.com/users/WebReflection/repos",
      "events_url": "https://api.github.com/users/WebReflection/events{/privacy}",
      "received_events_url": "https://api.github.com/users/WebReflection/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-03-31T03:59:21Z",
    "updated_at": "2013-03-31T04:00:21Z",
    "author_association": "NONE",
    "body": "``` javascript\nvar a = Object.create(null);a.__proto__ = [];Object.keys(a);\n// => [\"__proto__\"]\n```\n\nwhich is able to screw clone/copy operations being a bomb in the system able to break all instances\n\ncheck this in Canary, Firefox, Nightly, or node.js\n",
    "reactions": {
      "url": "https://api.github.com/repos/lodash/lodash/issues/comments/15686427/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/lodash/lodash/issues/comments/15686437",
    "html_url": "https://github.com/lodash/lodash/issues/226#issuecomment-15686437",
    "issue_url": "https://api.github.com/repos/lodash/lodash/issues/226",
    "id": 15686437,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1Njg2NDM3",
    "user": {
      "login": "jdalton",
      "id": 4303,
      "node_id": "MDQ6VXNlcjQzMDM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4303?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jdalton",
      "html_url": "https://github.com/jdalton",
      "followers_url": "https://api.github.com/users/jdalton/followers",
      "following_url": "https://api.github.com/users/jdalton/following{/other_user}",
      "gists_url": "https://api.github.com/users/jdalton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jdalton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jdalton/subscriptions",
      "organizations_url": "https://api.github.com/users/jdalton/orgs",
      "repos_url": "https://api.github.com/users/jdalton/repos",
      "events_url": "https://api.github.com/users/jdalton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jdalton/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-03-31T04:00:14Z",
    "updated_at": "2013-03-31T04:59:26Z",
    "author_association": "MEMBER",
    "body": "``` js\nvar a = Object.create(null);a.__proto__=[];Object.keys(a);\n// => ['__proto__']; in Opera (the correct behavior).\n// Safari/Chrome/Firefox are currently [], though Chrome has it fixed in Canary\n```\n",
    "reactions": {
      "url": "https://api.github.com/repos/lodash/lodash/issues/comments/15686437/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/lodash/lodash/issues/comments/15686438",
    "html_url": "https://github.com/lodash/lodash/issues/226#issuecomment-15686438",
    "issue_url": "https://api.github.com/repos/lodash/lodash/issues/226",
    "id": 15686438,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1Njg2NDM4",
    "user": {
      "login": "WebReflection",
      "id": 85749,
      "node_id": "MDQ6VXNlcjg1NzQ5",
      "avatar_url": "https://avatars.githubusercontent.com/u/85749?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/WebReflection",
      "html_url": "https://github.com/WebReflection",
      "followers_url": "https://api.github.com/users/WebReflection/followers",
      "following_url": "https://api.github.com/users/WebReflection/following{/other_user}",
      "gists_url": "https://api.github.com/users/WebReflection/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/WebReflection/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/WebReflection/subscriptions",
      "organizations_url": "https://api.github.com/users/WebReflection/orgs",
      "repos_url": "https://api.github.com/users/WebReflection/repos",
      "events_url": "https://api.github.com/users/WebReflection/events{/privacy}",
      "received_events_url": "https://api.github.com/users/WebReflection/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-03-31T04:00:41Z",
    "updated_at": "2013-03-31T04:00:41Z",
    "author_association": "NONE",
    "body": "precisely\n",
    "reactions": {
      "url": "https://api.github.com/repos/lodash/lodash/issues/comments/15686438/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/lodash/lodash/issues/comments/15686446",
    "html_url": "https://github.com/lodash/lodash/issues/226#issuecomment-15686446",
    "issue_url": "https://api.github.com/repos/lodash/lodash/issues/226",
    "id": 15686446,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1Njg2NDQ2",
    "user": {
      "login": "jdalton",
      "id": 4303,
      "node_id": "MDQ6VXNlcjQzMDM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4303?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jdalton",
      "html_url": "https://github.com/jdalton",
      "followers_url": "https://api.github.com/users/jdalton/followers",
      "following_url": "https://api.github.com/users/jdalton/following{/other_user}",
      "gists_url": "https://api.github.com/users/jdalton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jdalton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jdalton/subscriptions",
      "organizations_url": "https://api.github.com/users/jdalton/orgs",
      "repos_url": "https://api.github.com/users/jdalton/repos",
      "events_url": "https://api.github.com/users/jdalton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jdalton/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-03-31T04:01:28Z",
    "updated_at": "2013-03-31T16:02:52Z",
    "author_association": "MEMBER",
    "body": "> which is able to screw clone/copy operations being a bomb in the system able to break all instances\n\nThis is the desired behavior, not a bomb. On an object with a `null` `[[Prototype]]`, `__proto__` is just a regular property. I'll look into making current Chrome and others consistent.\n\nAlso, how awesome is it that we both typed the exact same example code within seconds of each other. Wonder twin powers!\n",
    "reactions": {
      "url": "https://api.github.com/repos/lodash/lodash/issues/comments/15686446/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/lodash/lodash/issues/comments/15686809",
    "html_url": "https://github.com/lodash/lodash/issues/226#issuecomment-15686809",
    "issue_url": "https://api.github.com/repos/lodash/lodash/issues/226",
    "id": 15686809,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1Njg2ODA5",
    "user": {
      "login": "jdalton",
      "id": 4303,
      "node_id": "MDQ6VXNlcjQzMDM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4303?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jdalton",
      "html_url": "https://github.com/jdalton",
      "followers_url": "https://api.github.com/users/jdalton/followers",
      "following_url": "https://api.github.com/users/jdalton/following{/other_user}",
      "gists_url": "https://api.github.com/users/jdalton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jdalton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jdalton/subscriptions",
      "organizations_url": "https://api.github.com/users/jdalton/orgs",
      "repos_url": "https://api.github.com/users/jdalton/repos",
      "events_url": "https://api.github.com/users/jdalton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jdalton/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-03-31T04:42:34Z",
    "updated_at": "2013-03-31T05:40:07Z",
    "author_association": "MEMBER",
    "body": "Ok, so since detecting if `__proto__` has been manually added to an object with a `null` `[[Prototype]]` is impossible-ish on current non-ES6 compliant browsers, because `__proto__` is still active on the object, I'm going to punt on addressing it. However, I believe addressing it would be trivial & have minimal perf impact if I could detect it.\n\nTo reiterate the behavior of `var a=Object.create(null);a.__proto__=[];Object.keys(a); //['__proto__']` is desired.\n",
    "reactions": {
      "url": "https://api.github.com/repos/lodash/lodash/issues/comments/15686809/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/lodash/lodash/issues/comments/15692282",
    "html_url": "https://github.com/lodash/lodash/issues/226#issuecomment-15692282",
    "issue_url": "https://api.github.com/repos/lodash/lodash/issues/226",
    "id": 15692282,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1NjkyMjgy",
    "user": {
      "login": "jdalton",
      "id": 4303,
      "node_id": "MDQ6VXNlcjQzMDM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4303?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jdalton",
      "html_url": "https://github.com/jdalton",
      "followers_url": "https://api.github.com/users/jdalton/followers",
      "following_url": "https://api.github.com/users/jdalton/following{/other_user}",
      "gists_url": "https://api.github.com/users/jdalton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jdalton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jdalton/subscriptions",
      "organizations_url": "https://api.github.com/users/jdalton/orgs",
      "repos_url": "https://api.github.com/users/jdalton/repos",
      "events_url": "https://api.github.com/users/jdalton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jdalton/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-03-31T14:51:59Z",
    "updated_at": "2013-03-31T16:03:31Z",
    "author_association": "MEMBER",
    "body": "@sharifmacky ? ES6 draft has `Object.prototype.__proto__` defined. When you create an object via `Object.create(null)` it has a `null` internal `[[Prototype]]` value and so does not inherit from `Object.prototype`. Any properties added to the object by assignment will be enumerable by default. When the `__proto__` property is added to an object with a `null` `[[Prototype]]` it's just a regular property w/o any special abilities.\n",
    "reactions": {
      "url": "https://api.github.com/repos/lodash/lodash/issues/comments/15692282/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/lodash/lodash/issues/comments/15694039",
    "html_url": "https://github.com/lodash/lodash/issues/226#issuecomment-15694039",
    "issue_url": "https://api.github.com/repos/lodash/lodash/issues/226",
    "id": 15694039,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1Njk0MDM5",
    "user": {
      "login": "WebReflection",
      "id": 85749,
      "node_id": "MDQ6VXNlcjg1NzQ5",
      "avatar_url": "https://avatars.githubusercontent.com/u/85749?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/WebReflection",
      "html_url": "https://github.com/WebReflection",
      "followers_url": "https://api.github.com/users/WebReflection/followers",
      "following_url": "https://api.github.com/users/WebReflection/following{/other_user}",
      "gists_url": "https://api.github.com/users/WebReflection/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/WebReflection/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/WebReflection/subscriptions",
      "organizations_url": "https://api.github.com/users/WebReflection/orgs",
      "repos_url": "https://api.github.com/users/WebReflection/repos",
      "events_url": "https://api.github.com/users/WebReflection/events{/privacy}",
      "received_events_url": "https://api.github.com/users/WebReflection/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-03-31T16:50:47Z",
    "updated_at": "2013-03-31T17:21:39Z",
    "author_association": "NONE",
    "body": "@jdalton the issue is not that `Object.create(null)` do not inherit `__proto__` from `Object.prototype` and it threat it as a generic key, which is indeed expected and desired, the issue is that _most mobile browsers_ have same issue Chrome has and the update there won't be available any soon.\n\n**Why This Is A Problem**\nEvery method that should iterate over a generic object cannot work anymore as expected in a consistent way unless a check against `key === '__proto__'` is performed per each key before acting.\n\n`_.extend()` is just an example, if the source object is a Dictionary (read `Object.create(null)`), and the `__proto__` is a key, and the target object is a generic object that can have inheritance changed because of this key, which is undesired and never a problem until now thanks to non-enumerability of that key even in dictionaries, what should happen?\n\nIf Lo-Dash wants to be consistent with the known behavior:\n- each `_.extend(target, source)` call should verify what kind of objects those are\n- if target is Dictionary and source is Dictionary, copy everything without problems\n- if target is Object, and source is Dictionary, do not copy the possible `__proto__` key preserving inheritance integrity and currently known behavior\n- if target is Object, and source is Object, and the `Object.prototype` descriptor of `__proto__` is not the native one or it has been simply deleted, act as Dictionary & Dictionary, copy everything\n\n**Thanks TC39, We Gonna Have Bad Time**\nAre you willing to make a basic method such copy or extend aware of all possible scenarios introduced by the `__proto__` concept which is _configurable_, then _rewritable_, potentially made _enumerable_ if reconfigured, and not present in Dictionary only for the 50% of browsers out there?\n~~As far as I know, IE11 is implementing that property in an even different way so, brace yourself, disaster and fear oriented development is coming due a property in the middle that is causing an exception to the standard that nobody really wants.~~\n\n**What To Do To Change This**\nAFAIK Allen confirmed that TC39 is aware of all these problems but it does not believe that libraries will drop its usage.\n\nOf course libraries will not drop it until there is a standard able to replace same behavior.\nIn order to make TC39 change its mind we need to use a code that is relying into a non existent yet standard\n\n``` javascript\nvar setPrototypeOf = Object.setPrototypeOf || function (o, p) {\n  o.__proto__ = p;\n  return o;\n};\n```\n\nThis method preserves easiness and semantic, allowing `{__proto__:obj}` behavior via `Object.setPrototypeOf({}, obj)` and once widely adopted could make it in favor of deprecating and removing from any spec the current `__proto__` keyword ... which is a bomb in the system.\n",
    "reactions": {
      "url": "https://api.github.com/repos/lodash/lodash/issues/comments/15694039/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/lodash/lodash/issues/comments/15694136",
    "html_url": "https://github.com/lodash/lodash/issues/226#issuecomment-15694136",
    "issue_url": "https://api.github.com/repos/lodash/lodash/issues/226",
    "id": 15694136,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1Njk0MTM2",
    "user": {
      "login": "jdalton",
      "id": 4303,
      "node_id": "MDQ6VXNlcjQzMDM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4303?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jdalton",
      "html_url": "https://github.com/jdalton",
      "followers_url": "https://api.github.com/users/jdalton/followers",
      "following_url": "https://api.github.com/users/jdalton/following{/other_user}",
      "gists_url": "https://api.github.com/users/jdalton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jdalton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jdalton/subscriptions",
      "organizations_url": "https://api.github.com/users/jdalton/orgs",
      "repos_url": "https://api.github.com/users/jdalton/repos",
      "events_url": "https://api.github.com/users/jdalton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jdalton/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-03-31T16:56:09Z",
    "updated_at": "2013-03-31T17:39:53Z",
    "author_association": "MEMBER",
    "body": "> the issue is not that `Object.create(null)` do not inherit `__proto__` from `Object.prototype` and it threat it as a generic key, which is indeed expected and desired, the issue is that most mobile browsers have same issue Chrome has and the update there won't be available any soon.\n\nI'm not concerned w/ what the current non-spec'ed behavior is (we can't control that), I'm glad the spec'ed behavior is clearing up these issues.\n\n> **Why This Is A Problem**\n> Every method that should iterate over a generic object cannot work anymore as expected in a consistent way unless a check against key === '**proto**' is performed per each key before acting.\n\nCannot work anymore? This has been an issue with `__proto__` since the beginning and there hasn't been a pain point across libs that I'm aware of. The double underscore prefix/postfix does a good job of avoiding accidental issues.\n\n> Thanks TC39, We Gonna Have Bad Time\n\nNo, thanks to the TC39 `__proto__` is getting better/more-consistent, we'll have a good time :D\n\n> If Lo-Dash wants to be consistent with the known behavior...\n\nI've already explored this in [my previous comment](https://github.com/bestiejs/lodash/issues/226#issuecomment-15686809).\nI may also simply prefix key names I use for data objects, in `cachedContains` for example.\n\n> ~~As far as I know, IE11 is implementing that property in an even different way so, brace yourself, disaster and fear oriented development is coming due a property in the middle that is causing an exception to the standard that nobody really wants.~~\n\nLet's not speculate on IE11 please.\n\n> This method preserves easiness and semantic, allowing `{__proto__:obj}` behavior via `Object.setPrototypeOf({}, obj)` and once widely adopted could make it in favor of deprecating and removing from any spec the current `__proto__` keyword ... which is a bomb in the system\n\n`__proto__` is already used and a de facto standard. Standardizing is the right answer to clear up existing inconsistencies.\n",
    "reactions": {
      "url": "https://api.github.com/repos/lodash/lodash/issues/comments/15694136/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/lodash/lodash/issues/comments/15695229",
    "html_url": "https://github.com/lodash/lodash/issues/226#issuecomment-15695229",
    "issue_url": "https://api.github.com/repos/lodash/lodash/issues/226",
    "id": 15695229,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1Njk1MjI5",
    "user": {
      "login": "WebReflection",
      "id": 85749,
      "node_id": "MDQ6VXNlcjg1NzQ5",
      "avatar_url": "https://avatars.githubusercontent.com/u/85749?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/WebReflection",
      "html_url": "https://github.com/WebReflection",
      "followers_url": "https://api.github.com/users/WebReflection/followers",
      "following_url": "https://api.github.com/users/WebReflection/following{/other_user}",
      "gists_url": "https://api.github.com/users/WebReflection/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/WebReflection/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/WebReflection/subscriptions",
      "organizations_url": "https://api.github.com/users/WebReflection/orgs",
      "repos_url": "https://api.github.com/users/WebReflection/repos",
      "events_url": "https://api.github.com/users/WebReflection/events{/privacy}",
      "received_events_url": "https://api.github.com/users/WebReflection/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-03-31T18:04:55Z",
    "updated_at": "2013-03-31T18:05:12Z",
    "author_association": "NONE",
    "body": "using `Object.setPrototypeOf()`, and everybody seems to agree on it, would solve this mess once for everyone without granting future problems for a property name, regardless which one is it, able to potentially destroy services.\n\nThe usage of a global Object method would be explicit and avoid everything we are discussing here .. so the point is, as I've written in my post, being stubborn for something that easy to solve nobody wants to.\n\nSo here my question: would you use `Object.setPrototypeOf(obj, proto)` if spec'd and if `__proto__` will disappear?\nI believe simply yes because there is no reason to not do it, IMHO, while there are tons of problems going forward with this messed up property.\n",
    "reactions": {
      "url": "https://api.github.com/repos/lodash/lodash/issues/comments/15695229/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/lodash/lodash/issues/comments/15695617",
    "html_url": "https://github.com/lodash/lodash/issues/226#issuecomment-15695617",
    "issue_url": "https://api.github.com/repos/lodash/lodash/issues/226",
    "id": 15695617,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1Njk1NjE3",
    "user": {
      "login": "jdalton",
      "id": 4303,
      "node_id": "MDQ6VXNlcjQzMDM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4303?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jdalton",
      "html_url": "https://github.com/jdalton",
      "followers_url": "https://api.github.com/users/jdalton/followers",
      "following_url": "https://api.github.com/users/jdalton/following{/other_user}",
      "gists_url": "https://api.github.com/users/jdalton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jdalton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jdalton/subscriptions",
      "organizations_url": "https://api.github.com/users/jdalton/orgs",
      "repos_url": "https://api.github.com/users/jdalton/repos",
      "events_url": "https://api.github.com/users/jdalton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jdalton/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-03-31T18:29:21Z",
    "updated_at": "2013-03-31T18:29:21Z",
    "author_association": "MEMBER",
    "body": "> using Object.setPrototypeOf(), and everybody seems to agree on it, would solve this mess once for everyone without granting future problems for a property name, regardless which one is it, able to potentially destroy services.\n\nThe sky is not falling. If it was a real pain point `setPrototypeOf` may have won out. As it is `__proto__` getting standardized is a win, dealing w/ its current inconsistencies is a minor inconvenience.\n",
    "reactions": {
      "url": "https://api.github.com/repos/lodash/lodash/issues/comments/15695617/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/lodash/lodash/issues/comments/15703194",
    "html_url": "https://github.com/lodash/lodash/issues/226#issuecomment-15703194",
    "issue_url": "https://api.github.com/repos/lodash/lodash/issues/226",
    "id": 15703194,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1NzAzMTk0",
    "user": {
      "login": "jdalton",
      "id": 4303,
      "node_id": "MDQ6VXNlcjQzMDM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4303?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jdalton",
      "html_url": "https://github.com/jdalton",
      "followers_url": "https://api.github.com/users/jdalton/followers",
      "following_url": "https://api.github.com/users/jdalton/following{/other_user}",
      "gists_url": "https://api.github.com/users/jdalton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jdalton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jdalton/subscriptions",
      "organizations_url": "https://api.github.com/users/jdalton/orgs",
      "repos_url": "https://api.github.com/users/jdalton/repos",
      "events_url": "https://api.github.com/users/jdalton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jdalton/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-04-01T03:38:18Z",
    "updated_at": "2013-04-01T03:39:09Z",
    "author_association": "MEMBER",
    "body": ">  `_.extend()` is just an example, if the source object is a Dictionary (read `Object.create(null)`), and the `__proto__` is a key, and the target object is a generic object that can have inheritance changed because of this key, which is undesired and never a problem until now thanks to non-enumerability of that key even in dictionaries, what should happen?\n\nI think that's a feature. If the source object has an enumerable `__proto__` it may be some mixin or options object that is designed to set properties of the destination object. \n\nSo the only issue I can see is with our `_.memoize` and `cachedContains` data objects, which I'll address by prefixing keys. Methods like `_.groupBy` and `_.countBy` will be solved by convention.\n",
    "reactions": {
      "url": "https://api.github.com/repos/lodash/lodash/issues/comments/15703194/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/lodash/lodash/issues/comments/463259914",
    "html_url": "https://github.com/lodash/lodash/issues/226#issuecomment-463259914",
    "issue_url": "https://api.github.com/repos/lodash/lodash/issues/226",
    "id": 463259914,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MzI1OTkxNA==",
    "user": {
      "login": "lock[bot]",
      "id": 33595554,
      "node_id": "MDM6Qm90MzM1OTU1NTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/in/6672?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lock%5Bbot%5D",
      "html_url": "https://github.com/apps/lock",
      "followers_url": "https://api.github.com/users/lock%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/lock%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/lock%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lock%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lock%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/lock%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/lock%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/lock%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lock%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2019-02-13T16:11:34Z",
    "updated_at": "2019-02-13T16:11:34Z",
    "author_association": "NONE",
    "body": "This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue for related bugs.",
    "reactions": {
      "url": "https://api.github.com/repos/lodash/lodash/issues/comments/463259914/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
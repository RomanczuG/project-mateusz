[
  {
    "url": "https://api.github.com/repos/lodash/lodash/issues/comments/614520243",
    "html_url": "https://github.com/lodash/lodash/issues/4700#issuecomment-614520243",
    "issue_url": "https://api.github.com/repos/lodash/lodash/issues/4700",
    "id": 614520243,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxNDUyMDI0Mw==",
    "user": {
      "login": "AChelp",
      "id": 47349676,
      "node_id": "MDQ6VXNlcjQ3MzQ5Njc2",
      "avatar_url": "https://avatars.githubusercontent.com/u/47349676?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AChelp",
      "html_url": "https://github.com/AChelp",
      "followers_url": "https://api.github.com/users/AChelp/followers",
      "following_url": "https://api.github.com/users/AChelp/following{/other_user}",
      "gists_url": "https://api.github.com/users/AChelp/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AChelp/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AChelp/subscriptions",
      "organizations_url": "https://api.github.com/users/AChelp/orgs",
      "repos_url": "https://api.github.com/users/AChelp/repos",
      "events_url": "https://api.github.com/users/AChelp/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AChelp/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-04-16T09:10:38Z",
    "updated_at": "2020-04-16T09:10:38Z",
    "author_association": "NONE",
    "body": "@wjw99830 did you find the solution?",
    "reactions": {
      "url": "https://api.github.com/repos/lodash/lodash/issues/comments/614520243/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/lodash/lodash/issues/comments/614527048",
    "html_url": "https://github.com/lodash/lodash/issues/4700#issuecomment-614527048",
    "issue_url": "https://api.github.com/repos/lodash/lodash/issues/4700",
    "id": 614527048,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxNDUyNzA0OA==",
    "user": {
      "login": "wjw99830",
      "id": 30546882,
      "node_id": "MDQ6VXNlcjMwNTQ2ODgy",
      "avatar_url": "https://avatars.githubusercontent.com/u/30546882?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wjw99830",
      "html_url": "https://github.com/wjw99830",
      "followers_url": "https://api.github.com/users/wjw99830/followers",
      "following_url": "https://api.github.com/users/wjw99830/following{/other_user}",
      "gists_url": "https://api.github.com/users/wjw99830/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wjw99830/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wjw99830/subscriptions",
      "organizations_url": "https://api.github.com/users/wjw99830/orgs",
      "repos_url": "https://api.github.com/users/wjw99830/repos",
      "events_url": "https://api.github.com/users/wjw99830/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wjw99830/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-04-16T09:23:10Z",
    "updated_at": "2020-04-16T09:23:10Z",
    "author_association": "NONE",
    "body": "@AChelp No, because I think it's a reasonable behavior. If we don't enable `leading`, it will be merited when call the function first time.",
    "reactions": {
      "url": "https://api.github.com/repos/lodash/lodash/issues/comments/614527048/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/lodash/lodash/issues/comments/614527825",
    "html_url": "https://github.com/lodash/lodash/issues/4700#issuecomment-614527825",
    "issue_url": "https://api.github.com/repos/lodash/lodash/issues/4700",
    "id": 614527825,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxNDUyNzgyNQ==",
    "user": {
      "login": "AChelp",
      "id": 47349676,
      "node_id": "MDQ6VXNlcjQ3MzQ5Njc2",
      "avatar_url": "https://avatars.githubusercontent.com/u/47349676?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AChelp",
      "html_url": "https://github.com/AChelp",
      "followers_url": "https://api.github.com/users/AChelp/followers",
      "following_url": "https://api.github.com/users/AChelp/following{/other_user}",
      "gists_url": "https://api.github.com/users/AChelp/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AChelp/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AChelp/subscriptions",
      "organizations_url": "https://api.github.com/users/AChelp/orgs",
      "repos_url": "https://api.github.com/users/AChelp/repos",
      "events_url": "https://api.github.com/users/AChelp/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AChelp/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-04-16T09:24:40Z",
    "updated_at": "2020-04-16T09:24:40Z",
    "author_association": "NONE",
    "body": "@wjw99830 ok, thnx.",
    "reactions": {
      "url": "https://api.github.com/repos/lodash/lodash/issues/comments/614527825/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/lodash/lodash/issues/comments/717271999",
    "html_url": "https://github.com/lodash/lodash/issues/4700#issuecomment-717271999",
    "issue_url": "https://api.github.com/repos/lodash/lodash/issues/4700",
    "id": 717271999,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcxNzI3MTk5OQ==",
    "user": {
      "login": "JustusW",
      "id": 1852088,
      "node_id": "MDQ6VXNlcjE4NTIwODg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1852088?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JustusW",
      "html_url": "https://github.com/JustusW",
      "followers_url": "https://api.github.com/users/JustusW/followers",
      "following_url": "https://api.github.com/users/JustusW/following{/other_user}",
      "gists_url": "https://api.github.com/users/JustusW/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JustusW/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JustusW/subscriptions",
      "organizations_url": "https://api.github.com/users/JustusW/orgs",
      "repos_url": "https://api.github.com/users/JustusW/repos",
      "events_url": "https://api.github.com/users/JustusW/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JustusW/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-10-27T14:12:28Z",
    "updated_at": "2020-10-27T14:13:28Z",
    "author_association": "NONE",
    "body": "Kinda have to reopen. This causes a typisation error and makes the generics pointless as it will always carry the pseudo type <T | undefined>. This is problematic for any T incompatible with undefined most prominently Promise.\r\n```\r\nfunction getSomething<Promise<ResultObj>>(query: string) {\r\n    return fetch(\"/data/something.json\" + new URLSearchParams({q: query}))\r\n}\r\n```\r\n\r\nIf I want to wrap this I have a problem:\r\n```\r\nlet fn = _.debounce<(query: string) => Promise<ResultObj>>(getSomething, 500)\r\nfunction foo(): Promise<ResultObj> {\r\n    return fn()\r\n}\r\n```\r\nwhich leads to this:\r\n```\r\nType 'DebouncedFunc<(query: string) => Promise<ResultObj>>' is not assignable to type '(query: string) => Promise<ResultObj>'\r\n  Type 'Promise<ResultObj> | undefined' is not assignable to type 'Promise<ResultObj>'.\r\n\r\n```\r\n\r\nYou can technically overwrap this:\r\n```\r\nlet f = _.debounce<(query: string) => Promise<ResultObj>>(getSomething, 500)\r\nlet fn = function (query: string): Promise<ResultObj> {\r\n    let out = new Promise<ResultObj>(((resolve, reject) => {reject()}));\r\n    let res = f(query)\r\n    if (res !== undefined) {\r\n        out = res\r\n    }\r\n    return out\r\n}\r\n```\r\nWhich is (in my considered opinion) an abomination and should be purged in the fires of the imperial holy inquisition...\r\nWhile you can just // @ts-ignore to suppress TS2322 I see that as... not exactly correct. Even if you set leading to true, which technically guarantees the value will never be undefined, it still breaks the chain of type assertion.\r\n\r\nMy suggestion would be to strongly type it to T (and not T | undefined) with the proviso of a new option fnFailure to return a failed state object appropriate to this context.\r\n\r\n```\r\nlet fn = _.debounce<(query: string) => Promise<ResultObj>>(getSomething, 500, {\r\n    fnFailure: () => new Promise<ResultObj>((resolve,reject) => reject())\r\n})\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/lodash/lodash/issues/comments/717271999/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/lodash/lodash/issues/comments/718152183",
    "html_url": "https://github.com/lodash/lodash/issues/4700#issuecomment-718152183",
    "issue_url": "https://api.github.com/repos/lodash/lodash/issues/4700",
    "id": 718152183,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcxODE1MjE4Mw==",
    "user": {
      "login": "wykzhang",
      "id": 29076529,
      "node_id": "MDQ6VXNlcjI5MDc2NTI5",
      "avatar_url": "https://avatars.githubusercontent.com/u/29076529?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wykzhang",
      "html_url": "https://github.com/wykzhang",
      "followers_url": "https://api.github.com/users/wykzhang/followers",
      "following_url": "https://api.github.com/users/wykzhang/following{/other_user}",
      "gists_url": "https://api.github.com/users/wykzhang/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wykzhang/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wykzhang/subscriptions",
      "organizations_url": "https://api.github.com/users/wykzhang/orgs",
      "repos_url": "https://api.github.com/users/wykzhang/repos",
      "events_url": "https://api.github.com/users/wykzhang/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wykzhang/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-10-28T19:15:49Z",
    "updated_at": "2020-10-28T19:16:00Z",
    "author_association": "NONE",
    "body": "I found this post by Jordan Papaleo very helpful.\r\nhttps://www.jordanpapaleo.com/Debouncing%20an%20API%20call%20with%20promise%20chaining/",
    "reactions": {
      "url": "https://api.github.com/repos/lodash/lodash/issues/comments/718152183/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/lodash/lodash/issues/comments/718160299",
    "html_url": "https://github.com/lodash/lodash/issues/4700#issuecomment-718160299",
    "issue_url": "https://api.github.com/repos/lodash/lodash/issues/4700",
    "id": 718160299,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcxODE2MDI5OQ==",
    "user": {
      "login": "JustusW",
      "id": 1852088,
      "node_id": "MDQ6VXNlcjE4NTIwODg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1852088?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JustusW",
      "html_url": "https://github.com/JustusW",
      "followers_url": "https://api.github.com/users/JustusW/followers",
      "following_url": "https://api.github.com/users/JustusW/following{/other_user}",
      "gists_url": "https://api.github.com/users/JustusW/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JustusW/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JustusW/subscriptions",
      "organizations_url": "https://api.github.com/users/JustusW/orgs",
      "repos_url": "https://api.github.com/users/JustusW/repos",
      "events_url": "https://api.github.com/users/JustusW/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JustusW/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-10-28T19:30:53Z",
    "updated_at": "2020-10-28T19:30:53Z",
    "author_association": "NONE",
    "body": "> I found this post by Jordan Papaleo very helpful.\r\n> https://www.jordanpapaleo.com/Debouncing%20an%20API%20call%20with%20promise%20chaining/\r\n\r\nThat's just a complicated way to say \"you have to break your API\". A function that sometimes returns undefined is not compatible to typescript usage. Period.\r\nAny T incompatible with undefined is broken by this. The theoretical ability to fix it in some cases does not cover cases in which this is not possible.",
    "reactions": {
      "url": "https://api.github.com/repos/lodash/lodash/issues/comments/718160299/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/lodash/lodash/issues/comments/805439202",
    "html_url": "https://github.com/lodash/lodash/issues/4700#issuecomment-805439202",
    "issue_url": "https://api.github.com/repos/lodash/lodash/issues/4700",
    "id": 805439202,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgwNTQzOTIwMg==",
    "user": {
      "login": "ianmacartney",
      "id": 366683,
      "node_id": "MDQ6VXNlcjM2NjY4Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/366683?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ianmacartney",
      "html_url": "https://github.com/ianmacartney",
      "followers_url": "https://api.github.com/users/ianmacartney/followers",
      "following_url": "https://api.github.com/users/ianmacartney/following{/other_user}",
      "gists_url": "https://api.github.com/users/ianmacartney/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ianmacartney/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ianmacartney/subscriptions",
      "organizations_url": "https://api.github.com/users/ianmacartney/orgs",
      "repos_url": "https://api.github.com/users/ianmacartney/repos",
      "events_url": "https://api.github.com/users/ianmacartney/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ianmacartney/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-24T02:40:54Z",
    "updated_at": "2021-03-24T02:40:54Z",
    "author_association": "NONE",
    "body": "Here's an async-friendly version of throttle (same idea applies to debounce) that will always return a promise, but only resolve/ reject the promise if the underlying function is called:\r\n```\r\n/**\r\n * Throttles an async function in a way that can be awaited.\r\n * By default throttle doesn't return a promise for async functions unless it's invoking them immediately. See CUR-4769 for details.\r\n * @param func async function to throttle calls for.\r\n * @param wait same function as lodash.throttle's wait parameter.\r\n *             Call this function at most this often.\r\n * @returns a promise which will be resolved/ rejected only if the function is executed, with the result of the underlying call.\r\n */\r\nfunction asyncThrottle<\r\n  F extends (...args: any[]) => Promise<any>\r\n>(func: F, wait?: number) {\r\n  const throttled = _.throttle((resolve, reject, args: Parameters<F>) => {\r\n    func(...args).then(resolve).catch(reject);\r\n  }, wait);\r\n  return (...args: Parameters<F>): ReturnType<F> =>\r\n    new Promise((resolve, reject) => {\r\n      throttled(resolve, reject, args);\r\n    }) as ReturnType<F>;\r\n}\r\n```\r\nworking in [a fork of a sandbox](https://codesandbox.io/s/zealous-microservice-qzu3l?file=/src/InputSection.js) from #4815 \r\n\r\nnon-typescript:\r\n```\r\nfunction asyncThrottle(func, wait) {\r\n  const throttled = _.throttle((resolve, reject, args) => {\r\n    func(...args).then(resolve).catch(reject);\r\n  }, wait);\r\n  return (...args) =>\r\n    new Promise((resolve, reject) => {\r\n      throttled(resolve, reject, args);\r\n    });\r\n}\r\n```\r\n\r\nother approaches to this seem to return cached values. This one minimizes how many calls to the function try to respond to the results",
    "reactions": {
      "url": "https://api.github.com/repos/lodash/lodash/issues/comments/805439202/reactions",
      "total_count": 8,
      "+1": 6,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 2,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
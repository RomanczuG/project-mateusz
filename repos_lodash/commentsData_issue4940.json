[
  {
    "url": "https://api.github.com/repos/lodash/lodash/issues/comments/704732411",
    "html_url": "https://github.com/lodash/lodash/issues/4940#issuecomment-704732411",
    "issue_url": "https://api.github.com/repos/lodash/lodash/issues/4940",
    "id": 704732411,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcwNDczMjQxMQ==",
    "user": {
      "login": "FelixRilling",
      "id": 3207763,
      "node_id": "MDQ6VXNlcjMyMDc3NjM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3207763?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/FelixRilling",
      "html_url": "https://github.com/FelixRilling",
      "followers_url": "https://api.github.com/users/FelixRilling/followers",
      "following_url": "https://api.github.com/users/FelixRilling/following{/other_user}",
      "gists_url": "https://api.github.com/users/FelixRilling/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/FelixRilling/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/FelixRilling/subscriptions",
      "organizations_url": "https://api.github.com/users/FelixRilling/orgs",
      "repos_url": "https://api.github.com/users/FelixRilling/repos",
      "events_url": "https://api.github.com/users/FelixRilling/events{/privacy}",
      "received_events_url": "https://api.github.com/users/FelixRilling/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-10-07T06:47:37Z",
    "updated_at": "2020-10-07T06:47:37Z",
    "author_association": "NONE",
    "body": "Agreed, while the current behavior is technically correct (find a string in 'on', return the 'search' method of the string), it seems kind of confusing and rarely useful. However I am unsure how to properly define a fix - should only 'built-in' methods be ignored? should all methods be ignored (probably not)? should this be configurable?",
    "reactions": {
      "url": "https://api.github.com/repos/lodash/lodash/issues/comments/704732411/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/lodash/lodash/issues/comments/704768777",
    "html_url": "https://github.com/lodash/lodash/issues/4940#issuecomment-704768777",
    "issue_url": "https://api.github.com/repos/lodash/lodash/issues/4940",
    "id": 704768777,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcwNDc2ODc3Nw==",
    "user": {
      "login": "ZimGil",
      "id": 39461857,
      "node_id": "MDQ6VXNlcjM5NDYxODU3",
      "avatar_url": "https://avatars.githubusercontent.com/u/39461857?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ZimGil",
      "html_url": "https://github.com/ZimGil",
      "followers_url": "https://api.github.com/users/ZimGil/followers",
      "following_url": "https://api.github.com/users/ZimGil/following{/other_user}",
      "gists_url": "https://api.github.com/users/ZimGil/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ZimGil/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ZimGil/subscriptions",
      "organizations_url": "https://api.github.com/users/ZimGil/orgs",
      "repos_url": "https://api.github.com/users/ZimGil/repos",
      "events_url": "https://api.github.com/users/ZimGil/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ZimGil/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-10-07T08:06:23Z",
    "updated_at": "2020-10-20T07:15:44Z",
    "author_association": "NONE",
    "body": "A possible fix to this case will be to check if the found value is coming from the `prototype` and ignoring it if it is coming from the prototype and the prototype is a native type,\r\nThe idea behind this solution is that it will brake any cases of methods coming from the native types.\r\nI'm also unsure about the expected behavior.\r\n\r\n```javascript\r\nconst nativeTypes = ['Object', 'String', 'Array', 'Number', 'Set', 'Function', 'Symbol', 'Boolean', .......];\r\n\r\nclass Foo {\r\n  toString() {console.log('lodash')};\r\n}\r\n\r\nconst foo = new Foo();\r\n\r\nfoo.toString()\r\n// \"lodash\"\r\n\r\nfoo.__proto__.toString()\r\n// \"lodash\"\r\n\r\nfoo.__proto__.toString === foo.toString\r\n// true\r\n\r\nnativeTypes.includes(foo.__proto__.constructor.name)\r\n// false\r\n\r\nconst bar = { toString: () => console.log('lodash') };\r\n\r\nbar.toString()\r\n// \"lodash\"\r\n\r\nbar.__proto__.toString()\r\n// \"[object Object]\"\r\n\r\nbar.__proto__.toString === bar.toString\r\n// false\r\n```\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/lodash/lodash/issues/comments/704768777/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/lodash/lodash/issues/comments/748894183",
    "html_url": "https://github.com/lodash/lodash/issues/4940#issuecomment-748894183",
    "issue_url": "https://api.github.com/repos/lodash/lodash/issues/4940",
    "id": 748894183,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc0ODg5NDE4Mw==",
    "user": {
      "login": "bnjmnt4n",
      "id": 813865,
      "node_id": "MDQ6VXNlcjgxMzg2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/813865?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bnjmnt4n",
      "html_url": "https://github.com/bnjmnt4n",
      "followers_url": "https://api.github.com/users/bnjmnt4n/followers",
      "following_url": "https://api.github.com/users/bnjmnt4n/following{/other_user}",
      "gists_url": "https://api.github.com/users/bnjmnt4n/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bnjmnt4n/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bnjmnt4n/subscriptions",
      "organizations_url": "https://api.github.com/users/bnjmnt4n/orgs",
      "repos_url": "https://api.github.com/users/bnjmnt4n/repos",
      "events_url": "https://api.github.com/users/bnjmnt4n/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bnjmnt4n/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-12-21T10:17:37Z",
    "updated_at": "2020-12-21T10:17:37Z",
    "author_association": "MEMBER",
    "body": "The current behaviour is correct, and I don't believe we will ever implement any checks to see if an object is of a native type before getting. Such behaviour is going to be unsustainable in the long run, as ECMAScript might get more and more data types (modern ES included maps, sets, all the new Array types, etc.). ",
    "reactions": {
      "url": "https://api.github.com/repos/lodash/lodash/issues/comments/748894183/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
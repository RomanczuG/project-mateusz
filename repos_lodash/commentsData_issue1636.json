[
  {
    "url": "https://api.github.com/repos/lodash/lodash/issues/comments/156180714",
    "html_url": "https://github.com/lodash/lodash/issues/1636#issuecomment-156180714",
    "issue_url": "https://api.github.com/repos/lodash/lodash/issues/1636",
    "id": 156180714,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1NjE4MDcxNA==",
    "user": {
      "login": "jdalton",
      "id": 4303,
      "node_id": "MDQ6VXNlcjQzMDM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4303?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jdalton",
      "html_url": "https://github.com/jdalton",
      "followers_url": "https://api.github.com/users/jdalton/followers",
      "following_url": "https://api.github.com/users/jdalton/following{/other_user}",
      "gists_url": "https://api.github.com/users/jdalton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jdalton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jdalton/subscriptions",
      "organizations_url": "https://api.github.com/users/jdalton/orgs",
      "repos_url": "https://api.github.com/users/jdalton/repos",
      "events_url": "https://api.github.com/users/jdalton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jdalton/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-11-12T17:44:06Z",
    "updated_at": "2015-11-12T17:44:06Z",
    "author_association": "MEMBER",
    "body": "You're right we could add support for this. I'd like to keep the lazy evaluation code simple (not too large) as it has a more narrow use case (any time shortcut fusion can be applied). Is this something you're wanting because of a project, like a Mozilla project, or just a neat to have?\n",
    "reactions": {
      "url": "https://api.github.com/repos/lodash/lodash/issues/comments/156180714/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/lodash/lodash/issues/comments/156183485",
    "html_url": "https://github.com/lodash/lodash/issues/1636#issuecomment-156183485",
    "issue_url": "https://api.github.com/repos/lodash/lodash/issues/1636",
    "id": 156183485,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1NjE4MzQ4NQ==",
    "user": {
      "login": "dcherman",
      "id": 976608,
      "node_id": "MDQ6VXNlcjk3NjYwOA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/976608?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dcherman",
      "html_url": "https://github.com/dcherman",
      "followers_url": "https://api.github.com/users/dcherman/followers",
      "following_url": "https://api.github.com/users/dcherman/following{/other_user}",
      "gists_url": "https://api.github.com/users/dcherman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dcherman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dcherman/subscriptions",
      "organizations_url": "https://api.github.com/users/dcherman/orgs",
      "repos_url": "https://api.github.com/users/dcherman/repos",
      "events_url": "https://api.github.com/users/dcherman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dcherman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-11-12T17:55:01Z",
    "updated_at": "2015-11-12T17:55:01Z",
    "author_association": "NONE",
    "body": "This is going to assume a bit of knowledge about AngularJS, so please let me know if clarification is needed.\n\nSo the specific use case is that I've implemented virtual tree structures in AngularJS in order to support lists containing hundreds of thousands of items.  In certain cases, I need the next item in the tree, however there is no true tree structure in memory, the relations are all built up via expressions.  It's insanely expensive to construct the entire tree at once which is why my `children` property is currently is only evaluated when requested (then cached), however that doesn't solve the case of \"I want a specific node at this index\".  In order to do that, I currently fall back to manual construction of that node by wrapping the value at the provided index in the resolved expression.\n\nWhat would be awesome would be able to do something like\n\n``` js\nclass VirtualBranch {\n  children() {\n    return _(this.values).map(value => new VirtualNode(value));\n  }\n}\n```\n\nGiven lazy evaluation, I'd then be able to do\n\n``` js\nthisBranch.children().at(60000).value();\n```\n\nWhich should allow me access to the 60000th child without requiring construction of all others.  I've implemented this in my own code so it's not high priority for me, however my initial attempt was writing that exact code line of code above since intuitively it felt like it should work\n",
    "reactions": {
      "url": "https://api.github.com/repos/lodash/lodash/issues/comments/156183485/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/lodash/lodash/issues/comments/156186545",
    "html_url": "https://github.com/lodash/lodash/issues/1636#issuecomment-156186545",
    "issue_url": "https://api.github.com/repos/lodash/lodash/issues/1636",
    "id": 156186545,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1NjE4NjU0NQ==",
    "user": {
      "login": "jdalton",
      "id": 4303,
      "node_id": "MDQ6VXNlcjQzMDM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4303?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jdalton",
      "html_url": "https://github.com/jdalton",
      "followers_url": "https://api.github.com/users/jdalton/followers",
      "following_url": "https://api.github.com/users/jdalton/following{/other_user}",
      "gists_url": "https://api.github.com/users/jdalton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jdalton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jdalton/subscriptions",
      "organizations_url": "https://api.github.com/users/jdalton/orgs",
      "repos_url": "https://api.github.com/users/jdalton/repos",
      "events_url": "https://api.github.com/users/jdalton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jdalton/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-11-12T18:07:27Z",
    "updated_at": "2015-11-14T21:51:23Z",
    "author_association": "MEMBER",
    "body": "I'll kick something around. This would be doable for a single index by using our lazy `slice` under the hood, for more indexes it would require re-working our lazy implementation as it's currently set up to handle `start` and `end` index ranges and not individual indexes.\n",
    "reactions": {
      "url": "https://api.github.com/repos/lodash/lodash/issues/comments/156186545/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/lodash/lodash/issues/comments/156747030",
    "html_url": "https://github.com/lodash/lodash/issues/1636#issuecomment-156747030",
    "issue_url": "https://api.github.com/repos/lodash/lodash/issues/1636",
    "id": 156747030,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1Njc0NzAzMA==",
    "user": {
      "login": "jdalton",
      "id": 4303,
      "node_id": "MDQ6VXNlcjQzMDM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4303?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jdalton",
      "html_url": "https://github.com/jdalton",
      "followers_url": "https://api.github.com/users/jdalton/followers",
      "following_url": "https://api.github.com/users/jdalton/following{/other_user}",
      "gists_url": "https://api.github.com/users/jdalton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jdalton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jdalton/subscriptions",
      "organizations_url": "https://api.github.com/users/jdalton/orgs",
      "repos_url": "https://api.github.com/users/jdalton/repos",
      "events_url": "https://api.github.com/users/jdalton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jdalton/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-11-14T21:25:23Z",
    "updated_at": "2015-11-14T21:46:33Z",
    "author_association": "MEMBER",
    "body": "After digging it looks like support for this fully will cost too much in implementation. Our `_.at` method can work on arrays or objects and can accept deep paths. That said I can support the case of an array selecting a single index pretty easily so in that case shortcut fusion will kick in.\n\nThe implementation looks something like:\n\n``` js\n    LazyWrapper.prototype.at = rest(function(paths) {\n      paths = baseFlatten(paths);\n      return (paths.length == 1 && isIndex(paths[0]))\n        ? this.slice(paths[0], paths[0] + 1)\n        : new LazyWrapper(this);\n    });\n```\n\nwhich will cover your case of:\n\n> ``` js\n> thisBranch.children().at(60000).value();\n> ```\n\nand execute the map iteratee of `value => new VirtualNode(value)` only one time.\n",
    "reactions": {
      "url": "https://api.github.com/repos/lodash/lodash/issues/comments/156747030/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/lodash/lodash/issues/comments/455805193",
    "html_url": "https://github.com/lodash/lodash/issues/1636#issuecomment-455805193",
    "issue_url": "https://api.github.com/repos/lodash/lodash/issues/1636",
    "id": 455805193,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NTgwNTE5Mw==",
    "user": {
      "login": "lock[bot]",
      "id": 33595554,
      "node_id": "MDM6Qm90MzM1OTU1NTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/in/6672?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lock%5Bbot%5D",
      "html_url": "https://github.com/apps/lock",
      "followers_url": "https://api.github.com/users/lock%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/lock%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/lock%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lock%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lock%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/lock%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/lock%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/lock%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lock%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2019-01-19T18:46:46Z",
    "updated_at": "2019-01-19T18:46:46Z",
    "author_association": "NONE",
    "body": "This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue for related bugs.",
    "reactions": {
      "url": "https://api.github.com/repos/lodash/lodash/issues/comments/455805193/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
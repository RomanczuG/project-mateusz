[
  {
    "url": "https://api.github.com/repos/expressjs/express/issues/comments/695143565",
    "html_url": "https://github.com/expressjs/express/issues/4407#issuecomment-695143565",
    "issue_url": "https://api.github.com/repos/expressjs/express/issues/4407",
    "id": 695143565,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5NTE0MzU2NQ==",
    "user": {
      "login": "dougwilson",
      "id": 67512,
      "node_id": "MDQ6VXNlcjY3NTEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/67512?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dougwilson",
      "html_url": "https://github.com/dougwilson",
      "followers_url": "https://api.github.com/users/dougwilson/followers",
      "following_url": "https://api.github.com/users/dougwilson/following{/other_user}",
      "gists_url": "https://api.github.com/users/dougwilson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dougwilson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dougwilson/subscriptions",
      "organizations_url": "https://api.github.com/users/dougwilson/orgs",
      "repos_url": "https://api.github.com/users/dougwilson/repos",
      "events_url": "https://api.github.com/users/dougwilson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dougwilson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-19T01:13:47Z",
    "updated_at": "2020-09-19T01:13:47Z",
    "author_association": "MEMBER",
    "body": "I'm not sure this type of thing is actually in scope of Express.js core, as it seems to be a helper loader for a specific way to do route loading.",
    "reactions": {
      "url": "https://api.github.com/repos/expressjs/express/issues/comments/695143565/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/expressjs/express/issues/comments/695149798",
    "html_url": "https://github.com/expressjs/express/issues/4407#issuecomment-695149798",
    "issue_url": "https://api.github.com/repos/expressjs/express/issues/4407",
    "id": 695149798,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5NTE0OTc5OA==",
    "user": {
      "login": "josh-hemphill",
      "id": 46608115,
      "node_id": "MDQ6VXNlcjQ2NjA4MTE1",
      "avatar_url": "https://avatars.githubusercontent.com/u/46608115?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/josh-hemphill",
      "html_url": "https://github.com/josh-hemphill",
      "followers_url": "https://api.github.com/users/josh-hemphill/followers",
      "following_url": "https://api.github.com/users/josh-hemphill/following{/other_user}",
      "gists_url": "https://api.github.com/users/josh-hemphill/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/josh-hemphill/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/josh-hemphill/subscriptions",
      "organizations_url": "https://api.github.com/users/josh-hemphill/orgs",
      "repos_url": "https://api.github.com/users/josh-hemphill/repos",
      "events_url": "https://api.github.com/users/josh-hemphill/events{/privacy}",
      "received_events_url": "https://api.github.com/users/josh-hemphill/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-19T02:04:07Z",
    "updated_at": "2020-09-19T02:04:07Z",
    "author_association": "NONE",
    "body": "I sort of agree, but I also think there should be a better way to work with importing middleware in an ES module environment. \r\nIn my commonjs project I'd make heavy use of \r\n`router.use('/category', require('./category'))`\r\nand structuring my project like \r\n```txt\r\n/api\r\n - index.js\r\n - /category\r\n    - index.js\r\n```\r\nMaybe there's a way to structure my project to achieve similar level of conciseness. I'd really like to find a cleaner solution to achieving a similar structure in ES module projects.",
    "reactions": {
      "url": "https://api.github.com/repos/expressjs/express/issues/comments/695149798/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/expressjs/express/issues/comments/695150539",
    "html_url": "https://github.com/expressjs/express/issues/4407#issuecomment-695150539",
    "issue_url": "https://api.github.com/repos/expressjs/express/issues/4407",
    "id": 695150539,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5NTE1MDUzOQ==",
    "user": {
      "login": "dougwilson",
      "id": 67512,
      "node_id": "MDQ6VXNlcjY3NTEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/67512?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dougwilson",
      "html_url": "https://github.com/dougwilson",
      "followers_url": "https://api.github.com/users/dougwilson/followers",
      "following_url": "https://api.github.com/users/dougwilson/following{/other_user}",
      "gists_url": "https://api.github.com/users/dougwilson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dougwilson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dougwilson/subscriptions",
      "organizations_url": "https://api.github.com/users/dougwilson/orgs",
      "repos_url": "https://api.github.com/users/dougwilson/repos",
      "events_url": "https://api.github.com/users/dougwilson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dougwilson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-19T02:11:20Z",
    "updated_at": "2020-09-19T02:11:20Z",
    "author_association": "MEMBER",
    "body": "Well, maybe there is a misunderstanding :) I'm not saying your problem should not be solved, but that it is out-of-scope of Express.js core, as we currently define it. Express.js itself says out of the business of attempting to be a module loading, specifically because that makes it harder to use Express.js in cases where you need that flexibility; think of it being pre-packed using Webpack, for instance. As in, we currently assume that how to load your data from disk and structure your JavaScript files is a separate responsibility to the web framework itself, and there are many more-encompassing frameworks built on top of Express that does add those additional pieces--it is not too dissimilar to how we keep most of our functionality itself outside of Express.js core, like `cors`, `morgan`, `csurf`, `compression`, `session`, and many others.\r\n\r\nI'm not sure if a module like https://www.npmjs.com/package/auto-route-loader is something inline with what you are looking to exist, for example.",
    "reactions": {
      "url": "https://api.github.com/repos/expressjs/express/issues/comments/695150539/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/expressjs/express/issues/comments/695152437",
    "html_url": "https://github.com/expressjs/express/issues/4407#issuecomment-695152437",
    "issue_url": "https://api.github.com/repos/expressjs/express/issues/4407",
    "id": 695152437,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5NTE1MjQzNw==",
    "user": {
      "login": "josh-hemphill",
      "id": 46608115,
      "node_id": "MDQ6VXNlcjQ2NjA4MTE1",
      "avatar_url": "https://avatars.githubusercontent.com/u/46608115?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/josh-hemphill",
      "html_url": "https://github.com/josh-hemphill",
      "followers_url": "https://api.github.com/users/josh-hemphill/followers",
      "following_url": "https://api.github.com/users/josh-hemphill/following{/other_user}",
      "gists_url": "https://api.github.com/users/josh-hemphill/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/josh-hemphill/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/josh-hemphill/subscriptions",
      "organizations_url": "https://api.github.com/users/josh-hemphill/orgs",
      "repos_url": "https://api.github.com/users/josh-hemphill/repos",
      "events_url": "https://api.github.com/users/josh-hemphill/events{/privacy}",
      "received_events_url": "https://api.github.com/users/josh-hemphill/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-19T02:30:25Z",
    "updated_at": "2020-09-19T02:30:25Z",
    "author_association": "NONE",
    "body": "Ah, \r\nNo, I'm not talking about doing the importing, I agree that makes no sense for express to do. I'm thinking along the lines of just being able to pass a promise to express that will eventually resolve to middleware, regardless of what is actually providing it.\r\nIf it did that, then just passing it a dynamic import in ES land would do the trick (though then there's the issue that `export default` is considered bad practice), or it would allow for wrapping express directly with resolvers etc.",
    "reactions": {
      "url": "https://api.github.com/repos/expressjs/express/issues/comments/695152437/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/expressjs/express/issues/comments/695152945",
    "html_url": "https://github.com/expressjs/express/issues/4407#issuecomment-695152945",
    "issue_url": "https://api.github.com/repos/expressjs/express/issues/4407",
    "id": 695152945,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5NTE1Mjk0NQ==",
    "user": {
      "login": "dougwilson",
      "id": 67512,
      "node_id": "MDQ6VXNlcjY3NTEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/67512?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dougwilson",
      "html_url": "https://github.com/dougwilson",
      "followers_url": "https://api.github.com/users/dougwilson/followers",
      "following_url": "https://api.github.com/users/dougwilson/following{/other_user}",
      "gists_url": "https://api.github.com/users/dougwilson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dougwilson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dougwilson/subscriptions",
      "organizations_url": "https://api.github.com/users/dougwilson/orgs",
      "repos_url": "https://api.github.com/users/dougwilson/repos",
      "events_url": "https://api.github.com/users/dougwilson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dougwilson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-19T02:35:57Z",
    "updated_at": "2020-09-19T02:35:57Z",
    "author_association": "MEMBER",
    "body": "Oh, I see, thanks for the clarification! So the idea is that you would, ultimately, want to do `app.use(promise)` where `promise` will eventually resolve to a middleware? If I'm understanding you correctly, it _seems_ on the surface needlessly complicated for the router to handle, but that is just a feeling. I think to understand the proposal, we should probably get it flushed out more. For example, what should happen if that promise rejects? When it resolves to something not a middleware, like a string? Should `.listen` be allowed to be called if there are still unresolved middleware? And of course, many, many more cases. I think the next step would be to work to clarify how all this would work, from your point of view as the proposer, so we can understand what should happen. If there are cases you think of, but you're not sure how it should work, list those out and we can work together to resolve them all.",
    "reactions": {
      "url": "https://api.github.com/repos/expressjs/express/issues/comments/695152945/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/expressjs/express/issues/comments/695175402",
    "html_url": "https://github.com/expressjs/express/issues/4407#issuecomment-695175402",
    "issue_url": "https://api.github.com/repos/expressjs/express/issues/4407",
    "id": 695175402,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5NTE3NTQwMg==",
    "user": {
      "login": "josh-hemphill",
      "id": 46608115,
      "node_id": "MDQ6VXNlcjQ2NjA4MTE1",
      "avatar_url": "https://avatars.githubusercontent.com/u/46608115?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/josh-hemphill",
      "html_url": "https://github.com/josh-hemphill",
      "followers_url": "https://api.github.com/users/josh-hemphill/followers",
      "following_url": "https://api.github.com/users/josh-hemphill/following{/other_user}",
      "gists_url": "https://api.github.com/users/josh-hemphill/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/josh-hemphill/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/josh-hemphill/subscriptions",
      "organizations_url": "https://api.github.com/users/josh-hemphill/orgs",
      "repos_url": "https://api.github.com/users/josh-hemphill/repos",
      "events_url": "https://api.github.com/users/josh-hemphill/events{/privacy}",
      "received_events_url": "https://api.github.com/users/josh-hemphill/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-19T07:01:26Z",
    "updated_at": "2020-09-19T07:02:31Z",
    "author_association": "NONE",
    "body": "The more that I think about it, the more I think you're right that it should be a separate package. For my use case, importing ES modules, if you follow the best practice of not using `export default`, then the structure of the object returned from the promise could get pretty crazy, and specifying strict rules for exports might sabotage new users a bit.\r\nIf it was to be in express, it might be easiest to only take instances of Router from the promises, so if doing ES modules you could export routers by any name and import them as middleware, and/or you could have a specific name/key that would be pulled from an object.\r\nWhen using it myself it seemed to work okay having all the `.catch()` and handling outside express, and starting the `listen()` immediately with the completion of the synchronous code and then exiting if any promises passed were uncaught promises. Though I'm sure that whether it awaits on all async routes or not would need to be configurable.",
    "reactions": {
      "url": "https://api.github.com/repos/expressjs/express/issues/comments/695175402/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
[
  {
    "url": "https://api.github.com/repos/expressjs/express/issues/comments/64027832",
    "html_url": "https://github.com/expressjs/express/issues/2447#issuecomment-64027832",
    "issue_url": "https://api.github.com/repos/expressjs/express/issues/2447",
    "id": 64027832,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0MDI3ODMy",
    "user": {
      "login": "dougwilson",
      "id": 67512,
      "node_id": "MDQ6VXNlcjY3NTEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/67512?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dougwilson",
      "html_url": "https://github.com/dougwilson",
      "followers_url": "https://api.github.com/users/dougwilson/followers",
      "following_url": "https://api.github.com/users/dougwilson/following{/other_user}",
      "gists_url": "https://api.github.com/users/dougwilson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dougwilson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dougwilson/subscriptions",
      "organizations_url": "https://api.github.com/users/dougwilson/orgs",
      "repos_url": "https://api.github.com/users/dougwilson/repos",
      "events_url": "https://api.github.com/users/dougwilson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dougwilson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-21T19:52:19Z",
    "updated_at": "2014-11-21T19:52:19Z",
    "author_association": "MEMBER",
    "body": "I'm not similar with what Sinon.JS even is, but if that is the comment that broke it, it's 100% not a bug in Express. Express simply stopped releasing Zalgo in that comment, i.e. we fixed the behavior of our async callback to be _always async_ instead of _sometimes async_.\n",
    "reactions": {
      "url": "https://api.github.com/repos/expressjs/express/issues/comments/64027832/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/expressjs/express/issues/comments/64031957",
    "html_url": "https://github.com/expressjs/express/issues/2447#issuecomment-64031957",
    "issue_url": "https://api.github.com/repos/expressjs/express/issues/2447",
    "id": 64031957,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0MDMxOTU3",
    "user": {
      "login": "Rovack",
      "id": 6605826,
      "node_id": "MDQ6VXNlcjY2MDU4MjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6605826?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Rovack",
      "html_url": "https://github.com/Rovack",
      "followers_url": "https://api.github.com/users/Rovack/followers",
      "following_url": "https://api.github.com/users/Rovack/following{/other_user}",
      "gists_url": "https://api.github.com/users/Rovack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Rovack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Rovack/subscriptions",
      "organizations_url": "https://api.github.com/users/Rovack/orgs",
      "repos_url": "https://api.github.com/users/Rovack/repos",
      "events_url": "https://api.github.com/users/Rovack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Rovack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-21T20:21:52Z",
    "updated_at": "2014-11-22T01:32:35Z",
    "author_association": "NONE",
    "body": "Sorry, I suppose I should have been clearer.\n\nSinon.JS is (by far) the most popular stubbing framework for Node.JS (https://nodejsmodules.org/tags/stubs). One of the features it offers is \"fake timers\", which make it possible to manipulate time as needed - rather important functionality for any tests that deal with time-sensitive logic.\nTo do this, Sinon has to override several global functions, such as `setTimeout`, `setInterval`, and, as it happens, `setImmediate`.\n\nNow, sadly I'm not sufficiently familiar with the internals of Express, so I'm not sure what you mean by it previously being \"sometimes async\". However, I would guess that for tests, where the app is wrapped by something like `supertest`, it generally is synchronous.\n\nI could definitely be wrong about that, but what I can say for certain is that before this commit, the following code would work, and now it doesn't:\n\n``` js\nvar request = require('supertest');\nvar sinon = require('sinon');\nvar clock = sinon.useFakeTimers();\nvar app = require('../app');\nreturn request(app).get('/some/url').end(function() {\n  console.log('Success!');\n});\n```\n\nEither way, I think it would be wise to have someone who's more familiar with testing look this over. They may be able to provide insights into how this scenario can be handled with the current Express version, or suggest fixes if it can't. Wouldn't you agree?\n\nP.S. In our specific project it turned out we didn't really need to override `setImmediate` specifically (it was `setTimeout`, `setInterval` and `Date` that mattered to us), so the solution was just to re-override `setImmediate` with its original value after calling `useFakeTimers`. There's a few nuances to getting this right, and obviously it isn't a very elegant solution, but in our case it proved sufficient.\n",
    "reactions": {
      "url": "https://api.github.com/repos/expressjs/express/issues/comments/64031957/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/expressjs/express/issues/comments/64033635",
    "html_url": "https://github.com/expressjs/express/issues/2447#issuecomment-64033635",
    "issue_url": "https://api.github.com/repos/expressjs/express/issues/2447",
    "id": 64033635,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0MDMzNjM1",
    "user": {
      "login": "dougwilson",
      "id": 67512,
      "node_id": "MDQ6VXNlcjY3NTEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/67512?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dougwilson",
      "html_url": "https://github.com/dougwilson",
      "followers_url": "https://api.github.com/users/dougwilson/followers",
      "following_url": "https://api.github.com/users/dougwilson/following{/other_user}",
      "gists_url": "https://api.github.com/users/dougwilson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dougwilson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dougwilson/subscriptions",
      "organizations_url": "https://api.github.com/users/dougwilson/orgs",
      "repos_url": "https://api.github.com/users/dougwilson/repos",
      "events_url": "https://api.github.com/users/dougwilson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dougwilson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-21T20:34:55Z",
    "updated_at": "2014-11-21T20:34:55Z",
    "author_association": "MEMBER",
    "body": "> Either way, I think it would be wise to have someone who's more familiar with testing look this over.\n\nI am the authority on Express; there is no one else who will look this over, but if someone who actually knew how Sinon.JS worked could determine if it's a Sinon bug or not would be great. Please point them here :)\n\n> Now, sadly I'm not sufficiently familiar with the internals of Express, so I'm not sure what you mean by it previously being \"sometimes async\".\n\nLiterally if this change broke Sinon.JS it's a bug in Sinon or how you were using it. There is zero chance it is a bug in Express. You even said youself it should be async from your view, so just adding a `setImmediate` call would not make it look any different to how you're using it, but without it, it caused very real-world bugs and server crashes. The change you highlighted will never be reverted, but just because that change may have affected Sinon doesn't mean that it was specific the `setImmediate` call; the sometimes async behavior (which is very bad behavior) may have been masking a bug in Sinon.\n\nPerhaps this bug applies to you? https://github.com/cjohansen/Sinon.JS/issues/603 if so, then it's a mocha bug: https://github.com/mochajs/mocha/issues/1435 which has literally just been fixed and nothing yet published. Our new use of `setImmediate` probably brought that mocha bug into the light. Please try `npm install mochajs/mocha` to get the very latest mocha to test it out.\n",
    "reactions": {
      "url": "https://api.github.com/repos/expressjs/express/issues/comments/64033635/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/expressjs/express/issues/comments/64054289",
    "html_url": "https://github.com/expressjs/express/issues/2447#issuecomment-64054289",
    "issue_url": "https://api.github.com/repos/expressjs/express/issues/2447",
    "id": 64054289,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0MDU0Mjg5",
    "user": {
      "login": "Rovack",
      "id": 6605826,
      "node_id": "MDQ6VXNlcjY2MDU4MjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6605826?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Rovack",
      "html_url": "https://github.com/Rovack",
      "followers_url": "https://api.github.com/users/Rovack/followers",
      "following_url": "https://api.github.com/users/Rovack/following{/other_user}",
      "gists_url": "https://api.github.com/users/Rovack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Rovack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Rovack/subscriptions",
      "organizations_url": "https://api.github.com/users/Rovack/orgs",
      "repos_url": "https://api.github.com/users/Rovack/repos",
      "events_url": "https://api.github.com/users/Rovack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Rovack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-21T23:27:54Z",
    "updated_at": "2014-11-22T01:33:31Z",
    "author_association": "NONE",
    "body": "Thank you for your detailed answer.\n\nIt's definitely possible that I'm using Sinon wrong, or that Sinon doesn't work well when requests are handled asynchronously. The reason I bring it up as an issue with Express is that code which used to work (deterministically) in previous versions doesn't work with Express 4.10.2, so I figured you'd want to be notified.\n\nI actually didn't say that it should be asynchronous from my view, I said it should be synchronous (because of `supertest` etc), but maybe I really can't assume that.\n\nI also didn't say the change should be reverted, but rather had hoped someone might have a fix that would avoid these real-world problems while also making it possible to test Express apps with standard testing tools.\n\nBetter yet, it would be great if someone could point out what I'm doing wrong and what the proper way to use Express/Sinon in these scenarios is, if there is one.\n\nHowever, I should clarify that I definitely was not asking what the \"bug\" was; there's no question that the problem was created when that line changed, simply because changing it back to `return done(layerError)` makes the code work again. :)\n\nThere's also no question about the reason the change caused this problem: when fake timers are in effect, `setImmediate` don't execute until a \"tick\" function is explicitly called, as I mentioned in my original comment.\n\nSo, this isn't related to the mocha bug, but thank you anyway for the suggestion and for providing those links.\n\nAt any rate, I already have a workaround that works for my use-case. I fear other projects, that actually do need Sinon's `setImmediate` override, may not find it so easy to work with Express 4.10.2, but if you think there's nothing that can be done to solve this, that's up to you.\n",
    "reactions": {
      "url": "https://api.github.com/repos/expressjs/express/issues/comments/64054289/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/expressjs/express/issues/comments/64056881",
    "html_url": "https://github.com/expressjs/express/issues/2447#issuecomment-64056881",
    "issue_url": "https://api.github.com/repos/expressjs/express/issues/2447",
    "id": 64056881,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0MDU2ODgx",
    "user": {
      "login": "dougwilson",
      "id": 67512,
      "node_id": "MDQ6VXNlcjY3NTEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/67512?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dougwilson",
      "html_url": "https://github.com/dougwilson",
      "followers_url": "https://api.github.com/users/dougwilson/followers",
      "following_url": "https://api.github.com/users/dougwilson/following{/other_user}",
      "gists_url": "https://api.github.com/users/dougwilson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dougwilson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dougwilson/subscriptions",
      "organizations_url": "https://api.github.com/users/dougwilson/orgs",
      "repos_url": "https://api.github.com/users/dougwilson/repos",
      "events_url": "https://api.github.com/users/dougwilson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dougwilson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-21T23:57:31Z",
    "updated_at": "2014-11-22T01:29:54Z",
    "author_association": "MEMBER",
    "body": "> The reason I bring it up as an issue with Express is that code which used to work (deterministically) in previous versions doesn't work with Express 4.10.2, so I figured you'd want to be notified.\n\nI'm sorry, but the code was because Express < 4.10.2 was _not_ deterministic. That line _made it deterministic_.\n\nTake for example this:\n\n``` js\nvar express = require('express');\nvar request = require('supertest');\nvar sinon = require('sinon');\nvar clock = sinon.useFakeTimers();\nvar app = express();\napp.get('/', function (req, res) {\n  res.end();\n});\nreturn request(app).get('/some/url').end(function() {\n  console.log('Success!');\n});\n```\n\nvs\n\n``` js\nvar express = require('express');\nvar request = require('supertest');\nvar sinon = require('sinon');\nvar clock = sinon.useFakeTimers();\nvar app = express();\napp.get('/some/url', function (req, res, next) {\n  setTimeout(function(){\n    // nevermind, after a db lookup, i don't want to handle this route\n    next();\n  })\n})\nreturn request(app).get('/some/url').end(function() {\n  console.log('Success!');\n});\n```\n\nThe first app used to fall into the 404 handling code (which is outside of Express code) sync, while the second app would fall into it async. This was not deterministic from the view point of the external 404-handling code (which people can point anywhere). As of 4.10.2 it is not _always async_.\n\n> I also didn't say the change should be reverted, but rather had hoped someone might have a fix that would avoid these real-world problems while also making it possible to test Express apps with standard testing tools.\n\nI would like to understand what is going wrong, but I don't have any available time to understand what Sinon.JS is doing or even what it is. If someone who is knowledgeable can put together some code and explain what the _cause of the error is_ (not the _symptom_ is), and if it's something that can be fixed here or in Sinon.JS, then awesome! If there is a bug in Express, the fix is not removing the `setImmediate`, but something else. If someone can determine what that fix is, please make a PR or explain it and we can fix it.\n\n> there's no question that the problem was created when that line changed, simply because changing it back to \"return done(layerError)\" makes the code work again. :)\n\nOnce again, this did not _create a bug_, but only _revealed a bug that already existed because some behavior changed that should not have matter to Sinon.JS_. There is a difference.\n\n> There's also no question about the reason the change caused this problem: when fake timers are in effect, setImmediate don't execute until a \"tick\" function is explicitly called, as I mentioned in my original comment.\n\nInteresting. So, I would like to understand what that means, but it almost seems like it's using some terms that are Sinon.JS-related, right? I think my non-understanding of what Sinon.JS even is is blocking me from fully groking that sentence :(\n\n> I fear other projects, that actually do need Sinon's setImmediate override, may not find it so easy to work with Express 4.10.2, but if you think there's nothing that can be done to solve this, that's up to you.\n\nWe are using a feature of the Node.js platform. The sentence to me reads: \"Sinon.JS does not handle `setImmediate` well, can you just not use it?\". I'm not sure if that's very fair to ask Node.js library to reduce their use of Node.js features to assist with third-party libraries trying to patch globals. Our view on patching globals like `setImmediate`, `Date`, etc. is that you have to make them fully compliant with the existing functionality of Node.js core.\n\nIf you can provide me with a test case that does not use Sinon.JS that fails, I can 100% add it to the test suite and fix Express to work.\n",
    "reactions": {
      "url": "https://api.github.com/repos/expressjs/express/issues/comments/64056881/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/expressjs/express/issues/comments/64059332",
    "html_url": "https://github.com/expressjs/express/issues/2447#issuecomment-64059332",
    "issue_url": "https://api.github.com/repos/expressjs/express/issues/2447",
    "id": 64059332,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0MDU5MzMy",
    "user": {
      "login": "blakeembrey",
      "id": 1088987,
      "node_id": "MDQ6VXNlcjEwODg5ODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1088987?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/blakeembrey",
      "html_url": "https://github.com/blakeembrey",
      "followers_url": "https://api.github.com/users/blakeembrey/followers",
      "following_url": "https://api.github.com/users/blakeembrey/following{/other_user}",
      "gists_url": "https://api.github.com/users/blakeembrey/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/blakeembrey/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/blakeembrey/subscriptions",
      "organizations_url": "https://api.github.com/users/blakeembrey/orgs",
      "repos_url": "https://api.github.com/users/blakeembrey/repos",
      "events_url": "https://api.github.com/users/blakeembrey/events{/privacy}",
      "received_events_url": "https://api.github.com/users/blakeembrey/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-22T00:29:59Z",
    "updated_at": "2014-11-22T00:29:59Z",
    "author_association": "MEMBER",
    "body": "@dougwilson Figure I'll try to help out briefly. What Sinon.js does is patch global date/timer related functions for testing. The timed functions won't run unless you trigger a `tick` in Sinon.js. The issue that now occurs now would be that `setImmediate` has been patched and you would need to trigger a tick for it to respond. A potential patch may be to keep a reference to the global `setImmediate` locally, but it won't fix when it's patched before Express runs and it's a little jank.\n\n@Rovack Does that just about sum the issue up?\n",
    "reactions": {
      "url": "https://api.github.com/repos/expressjs/express/issues/comments/64059332/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/expressjs/express/issues/comments/64060142",
    "html_url": "https://github.com/expressjs/express/issues/2447#issuecomment-64060142",
    "issue_url": "https://api.github.com/repos/expressjs/express/issues/2447",
    "id": 64060142,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0MDYwMTQy",
    "user": {
      "login": "dougwilson",
      "id": 67512,
      "node_id": "MDQ6VXNlcjY3NTEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/67512?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dougwilson",
      "html_url": "https://github.com/dougwilson",
      "followers_url": "https://api.github.com/users/dougwilson/followers",
      "following_url": "https://api.github.com/users/dougwilson/following{/other_user}",
      "gists_url": "https://api.github.com/users/dougwilson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dougwilson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dougwilson/subscriptions",
      "organizations_url": "https://api.github.com/users/dougwilson/orgs",
      "repos_url": "https://api.github.com/users/dougwilson/repos",
      "events_url": "https://api.github.com/users/dougwilson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dougwilson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-22T00:40:57Z",
    "updated_at": "2014-11-22T00:41:07Z",
    "author_association": "MEMBER",
    "body": "> The issue that now occurs now would be that setImmediate has been patched and you would need to trigger a tick for it to respond.\n\nOhhhh, I fully understand now. Would using `process.nextTick` work? The reason I choose to use `setImmediate` instead of `process.nextTick`, though, is that unfortunately if I use `process.nextTick`, certain Node.js applications would then start printing out the following:\n\n```\n(node) warning: Recursive process.nextTick detected. This will break in the next version of node. Please use setImmediate for recursive deferral.\n```\n",
    "reactions": {
      "url": "https://api.github.com/repos/expressjs/express/issues/comments/64060142/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/expressjs/express/issues/comments/64061323",
    "html_url": "https://github.com/expressjs/express/issues/2447#issuecomment-64061323",
    "issue_url": "https://api.github.com/repos/expressjs/express/issues/2447",
    "id": 64061323,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0MDYxMzIz",
    "user": {
      "login": "blakeembrey",
      "id": 1088987,
      "node_id": "MDQ6VXNlcjEwODg5ODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1088987?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/blakeembrey",
      "html_url": "https://github.com/blakeembrey",
      "followers_url": "https://api.github.com/users/blakeembrey/followers",
      "following_url": "https://api.github.com/users/blakeembrey/following{/other_user}",
      "gists_url": "https://api.github.com/users/blakeembrey/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/blakeembrey/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/blakeembrey/subscriptions",
      "organizations_url": "https://api.github.com/users/blakeembrey/orgs",
      "repos_url": "https://api.github.com/users/blakeembrey/repos",
      "events_url": "https://api.github.com/users/blakeembrey/events{/privacy}",
      "received_events_url": "https://api.github.com/users/blakeembrey/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-22T01:00:30Z",
    "updated_at": "2014-11-22T01:00:30Z",
    "author_association": "MEMBER",
    "body": "I think `nextTick` would work, it's not patched IIRC. Still, aliasing locally seems like a better fix `var immediate = setImmediate`.\n",
    "reactions": {
      "url": "https://api.github.com/repos/expressjs/express/issues/comments/64061323/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/expressjs/express/issues/comments/64062295",
    "html_url": "https://github.com/expressjs/express/issues/2447#issuecomment-64062295",
    "issue_url": "https://api.github.com/repos/expressjs/express/issues/2447",
    "id": 64062295,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0MDYyMjk1",
    "user": {
      "login": "dougwilson",
      "id": 67512,
      "node_id": "MDQ6VXNlcjY3NTEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/67512?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dougwilson",
      "html_url": "https://github.com/dougwilson",
      "followers_url": "https://api.github.com/users/dougwilson/followers",
      "following_url": "https://api.github.com/users/dougwilson/following{/other_user}",
      "gists_url": "https://api.github.com/users/dougwilson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dougwilson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dougwilson/subscriptions",
      "organizations_url": "https://api.github.com/users/dougwilson/orgs",
      "repos_url": "https://api.github.com/users/dougwilson/repos",
      "events_url": "https://api.github.com/users/dougwilson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dougwilson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-22T01:18:59Z",
    "updated_at": "2014-11-22T01:18:59Z",
    "author_association": "MEMBER",
    "body": "> I think nextTick would work, it's not patched IIRC\n\nYes, but it produces those warnings I listed above.\n\n> Still, aliasing locally seems like a better fix var immediate = setImmediate.\n\nIf that works, I can definitely do it, but people are going to have problems with many of our dependencies which use `setImmediate` for deferrals, on the recommendation of Node.js core itself. My main reservation to this is change this one piece is only trying to fix the symptom, not the problem. Next thing you know, you're going to have to start asking all libraries on `npm` to bend over backwards and keep local copies of `setImmediate` so they do not interfere with Sinon.JS.\n",
    "reactions": {
      "url": "https://api.github.com/repos/expressjs/express/issues/comments/64062295/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/expressjs/express/issues/comments/64063508",
    "html_url": "https://github.com/expressjs/express/issues/2447#issuecomment-64063508",
    "issue_url": "https://api.github.com/repos/expressjs/express/issues/2447",
    "id": 64063508,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0MDYzNTA4",
    "user": {
      "login": "dougwilson",
      "id": 67512,
      "node_id": "MDQ6VXNlcjY3NTEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/67512?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dougwilson",
      "html_url": "https://github.com/dougwilson",
      "followers_url": "https://api.github.com/users/dougwilson/followers",
      "following_url": "https://api.github.com/users/dougwilson/following{/other_user}",
      "gists_url": "https://api.github.com/users/dougwilson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dougwilson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dougwilson/subscriptions",
      "organizations_url": "https://api.github.com/users/dougwilson/orgs",
      "repos_url": "https://api.github.com/users/dougwilson/repos",
      "events_url": "https://api.github.com/users/dougwilson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dougwilson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-22T01:45:17Z",
    "updated_at": "2014-11-22T01:45:17Z",
    "author_association": "MEMBER",
    "body": "In general, I don't think it's ever possible to fully understand when you should be calling this Sinon.JS's tick function when you get lots of dependencies involved; everything you are doing this, you are being the intricate implementation details of what you are testing into your test code. When you are testing more than just your own code, changes in those dependencies that have no effect on tests that do not rely on implementation details will only cause your tests to fail if you are relying on those details. This is basically going into unit testing theory and is another topic.\n\nBut, Express stands by mocking is absolutely not supported in any way for testing. Overriding `setImmediate` in such a way that you have to now control it's invocation manually is akin to mocking.\n\nI'm glad I now understand what the issue is, but I'm sorry to say we disagree on who's issue it is. In my opinion, as soon as you're asking to manually control all `setImmediate` invocations, then it is now your responsibility to follow through on that and call them. You should treat upgrading a dependency the same as your own code changing. Just like if you added a new `setImmediate` call in your code that doesn't change the output in any way would require you to add another tick increment in your test code, upgrading a dependency that does the same brings the same responsibility.\n\nIf benign changes in dependencies break your tests, you have just discovered you have been including internal implementation testing of your dependencies in your tests! https://github.com/senchalabs/connect/issues/1059 is a recent example in `connect` and now `connect` does absolutely no mocking and no longer relies on internal implementation details of it's dependencies.\n",
    "reactions": {
      "url": "https://api.github.com/repos/expressjs/express/issues/comments/64063508/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/expressjs/express/issues/comments/64310188",
    "html_url": "https://github.com/expressjs/express/issues/2447#issuecomment-64310188",
    "issue_url": "https://api.github.com/repos/expressjs/express/issues/2447",
    "id": 64310188,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0MzEwMTg4",
    "user": {
      "login": "rlidwka",
      "id": 999113,
      "node_id": "MDQ6VXNlcjk5OTExMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/999113?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rlidwka",
      "html_url": "https://github.com/rlidwka",
      "followers_url": "https://api.github.com/users/rlidwka/followers",
      "following_url": "https://api.github.com/users/rlidwka/following{/other_user}",
      "gists_url": "https://api.github.com/users/rlidwka/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rlidwka/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rlidwka/subscriptions",
      "organizations_url": "https://api.github.com/users/rlidwka/orgs",
      "repos_url": "https://api.github.com/users/rlidwka/repos",
      "events_url": "https://api.github.com/users/rlidwka/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rlidwka/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-25T04:51:45Z",
    "updated_at": "2014-11-25T04:51:45Z",
    "author_association": "MEMBER",
    "body": "> Next thing you know, you're going to have to start asking all libraries on npm to bend over backwards and keep local copies of setImmediate so they do not interfere with Sinon.JS.\n\nIt's [already started](https://github.com/caolan/async/issues/609).\n",
    "reactions": {
      "url": "https://api.github.com/repos/expressjs/express/issues/comments/64310188/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/expressjs/express/issues/comments/64311022",
    "html_url": "https://github.com/expressjs/express/issues/2447#issuecomment-64311022",
    "issue_url": "https://api.github.com/repos/expressjs/express/issues/2447",
    "id": 64311022,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0MzExMDIy",
    "user": {
      "login": "dougwilson",
      "id": 67512,
      "node_id": "MDQ6VXNlcjY3NTEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/67512?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dougwilson",
      "html_url": "https://github.com/dougwilson",
      "followers_url": "https://api.github.com/users/dougwilson/followers",
      "following_url": "https://api.github.com/users/dougwilson/following{/other_user}",
      "gists_url": "https://api.github.com/users/dougwilson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dougwilson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dougwilson/subscriptions",
      "organizations_url": "https://api.github.com/users/dougwilson/orgs",
      "repos_url": "https://api.github.com/users/dougwilson/repos",
      "events_url": "https://api.github.com/users/dougwilson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dougwilson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-25T05:07:22Z",
    "updated_at": "2014-11-25T05:07:22Z",
    "author_association": "MEMBER",
    "body": "The other thing is that if you need to control what `Date.now()` is returning, you are not using good dependency injection, which is why your tests are so hard to write. If you have to write a mock, then the code that requires a mock is not written well. Code written well will allow dependency injection, like for example if you are testing a library that uses timers, the use of timers should be completely extracted into a specific class and you can use dependency injection to inject a different implementation of that class for all testing except for the testing on that class itself.\n",
    "reactions": {
      "url": "https://api.github.com/repos/expressjs/express/issues/comments/64311022/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/expressjs/express/issues/comments/64380940",
    "html_url": "https://github.com/expressjs/express/issues/2447#issuecomment-64380940",
    "issue_url": "https://api.github.com/repos/expressjs/express/issues/2447",
    "id": 64380940,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0MzgwOTQw",
    "user": {
      "login": "Rovack",
      "id": 6605826,
      "node_id": "MDQ6VXNlcjY2MDU4MjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6605826?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Rovack",
      "html_url": "https://github.com/Rovack",
      "followers_url": "https://api.github.com/users/Rovack/followers",
      "following_url": "https://api.github.com/users/Rovack/following{/other_user}",
      "gists_url": "https://api.github.com/users/Rovack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Rovack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Rovack/subscriptions",
      "organizations_url": "https://api.github.com/users/Rovack/orgs",
      "repos_url": "https://api.github.com/users/Rovack/repos",
      "events_url": "https://api.github.com/users/Rovack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Rovack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-25T10:40:27Z",
    "updated_at": "2014-11-25T10:40:27Z",
    "author_association": "NONE",
    "body": "That's exactly right - \"except for the testing on that class itself\", which is a problem.\nWell, that and any end-to-end \"acceptance\" test in which you want to include your entire system, for a story that involves time. But I don't know how you feel about that kind of test.\n\nEither way, I can't agree that if _any_ test requires time manipulation then it's a problem with the code.\nThere is a reason people use Sinon's fake timers: when you want to test a module that's inherently time-related, you need to \"inject\" a different implementation of time.\n\nYou have, however, convinced me that this isn't a problem with Express alone.\nA proper solution will have to come in the form of a pattern suitable for these tests, or some new feature in Sinon.\n\nNevertheless, I would think the fact that the new version breaks any test code that uses fake timers, even if it's _entirely_ out of your control, should be documented somewhere.\nEven if we disagree on whether using fake timers is bad practice or not, the fact remains it is an existing practice, and you don't want people having to struggle themselves to figure out why their tests suddenly stopped working when they updated Express.\n",
    "reactions": {
      "url": "https://api.github.com/repos/expressjs/express/issues/comments/64380940/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/expressjs/express/issues/comments/64422695",
    "html_url": "https://github.com/expressjs/express/issues/2447#issuecomment-64422695",
    "issue_url": "https://api.github.com/repos/expressjs/express/issues/2447",
    "id": 64422695,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0NDIyNjk1",
    "user": {
      "login": "dougwilson",
      "id": 67512,
      "node_id": "MDQ6VXNlcjY3NTEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/67512?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dougwilson",
      "html_url": "https://github.com/dougwilson",
      "followers_url": "https://api.github.com/users/dougwilson/followers",
      "following_url": "https://api.github.com/users/dougwilson/following{/other_user}",
      "gists_url": "https://api.github.com/users/dougwilson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dougwilson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dougwilson/subscriptions",
      "organizations_url": "https://api.github.com/users/dougwilson/orgs",
      "repos_url": "https://api.github.com/users/dougwilson/repos",
      "events_url": "https://api.github.com/users/dougwilson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dougwilson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-25T16:02:18Z",
    "updated_at": "2014-11-25T16:02:18Z",
    "author_association": "MEMBER",
    "body": "> or some new feature in Sinon.\n\nSinon could add a feature that only injected the fake timers into specific files, so maybe that's a possibility? I'm not familiar enough with your workflow to understand if restricting the injection to specific files (or even directories) is useful, but if it is, Sinon could easily implement it by injecting globally like it does now, but inspecting the call stack to determine if it should fake or not.\n\n> should be documented somewhere.\n\nI can probably do that. Where was the first place you looked to find documentation when you ran into the issue/where do you think I should put it? Do you have any suggestions for the wording that does not mention Sinon.JS specifically (since it's a general issue)?\n",
    "reactions": {
      "url": "https://api.github.com/repos/expressjs/express/issues/comments/64422695/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/expressjs/express/issues/comments/64460069",
    "html_url": "https://github.com/expressjs/express/issues/2447#issuecomment-64460069",
    "issue_url": "https://api.github.com/repos/expressjs/express/issues/2447",
    "id": 64460069,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0NDYwMDY5",
    "user": {
      "login": "Rovack",
      "id": 6605826,
      "node_id": "MDQ6VXNlcjY2MDU4MjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6605826?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Rovack",
      "html_url": "https://github.com/Rovack",
      "followers_url": "https://api.github.com/users/Rovack/followers",
      "following_url": "https://api.github.com/users/Rovack/following{/other_user}",
      "gists_url": "https://api.github.com/users/Rovack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Rovack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Rovack/subscriptions",
      "organizations_url": "https://api.github.com/users/Rovack/orgs",
      "repos_url": "https://api.github.com/users/Rovack/repos",
      "events_url": "https://api.github.com/users/Rovack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Rovack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-25T19:52:03Z",
    "updated_at": "2014-11-25T19:52:03Z",
    "author_association": "NONE",
    "body": "The first place I looked was History.md, though having looked at it, it doesn't seem like that's the sort of information it usually contains.\nNot sure where else documentation regarding known issues could go, though.\n\nAs for phrasing, I think you could just say that Express now uses setImmediate before sending responses, so if setImmediate is overridden in a project, namely for testing with fake timers, these tests may become stuck.\n",
    "reactions": {
      "url": "https://api.github.com/repos/expressjs/express/issues/comments/64460069/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/expressjs/express/issues/comments/64463596",
    "html_url": "https://github.com/expressjs/express/issues/2447#issuecomment-64463596",
    "issue_url": "https://api.github.com/repos/expressjs/express/issues/2447",
    "id": 64463596,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0NDYzNTk2",
    "user": {
      "login": "dougwilson",
      "id": 67512,
      "node_id": "MDQ6VXNlcjY3NTEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/67512?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dougwilson",
      "html_url": "https://github.com/dougwilson",
      "followers_url": "https://api.github.com/users/dougwilson/followers",
      "following_url": "https://api.github.com/users/dougwilson/following{/other_user}",
      "gists_url": "https://api.github.com/users/dougwilson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dougwilson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dougwilson/subscriptions",
      "organizations_url": "https://api.github.com/users/dougwilson/orgs",
      "repos_url": "https://api.github.com/users/dougwilson/repos",
      "events_url": "https://api.github.com/users/dougwilson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dougwilson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-25T20:15:13Z",
    "updated_at": "2014-11-25T20:15:13Z",
    "author_association": "MEMBER",
    "body": "> now uses setImmediate before sending responses\n\nSo, it only uses `setImmeidate` before a 404 or error response, and even then, it depends on if you've added your own 404 or error handlers. And _then_, it depends on how many routers you used in your project, which ones they happened to traverse, etc. The number of times `setImmediate` is called is strictly tied to your app's code.\n",
    "reactions": {
      "url": "https://api.github.com/repos/expressjs/express/issues/comments/64463596/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/expressjs/express/issues/comments/64465501",
    "html_url": "https://github.com/expressjs/express/issues/2447#issuecomment-64465501",
    "issue_url": "https://api.github.com/repos/expressjs/express/issues/2447",
    "id": 64465501,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0NDY1NTAx",
    "user": {
      "login": "dougwilson",
      "id": 67512,
      "node_id": "MDQ6VXNlcjY3NTEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/67512?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dougwilson",
      "html_url": "https://github.com/dougwilson",
      "followers_url": "https://api.github.com/users/dougwilson/followers",
      "following_url": "https://api.github.com/users/dougwilson/following{/other_user}",
      "gists_url": "https://api.github.com/users/dougwilson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dougwilson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dougwilson/subscriptions",
      "organizations_url": "https://api.github.com/users/dougwilson/orgs",
      "repos_url": "https://api.github.com/users/dougwilson/repos",
      "events_url": "https://api.github.com/users/dougwilson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dougwilson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-25T20:28:47Z",
    "updated_at": "2014-11-25T20:28:47Z",
    "author_association": "MEMBER",
    "body": "`res.sendFile` and `res.sendfile` also use `setImmediate` internally, and when they call it depends on what the client did, so you don't have a way to control it's timing from your code (`on-finished` internally calls `setImmediate` depending on the conditions of the reqest).\n\nWhen the default error handler is calling, the `finalhandler` dependency internally calls `setImmediate` to invoke the logging function as well.\n\n> Not sure where else documentation regarding known issues could go, though.\n\nCurrently there are no known issues with Express, otherwise they would be fixed. As for known issue when a user combines two different libraries together, I'm not sure where that would go. Perhaps on the expressjs.com website (issues for that at https://github.com/strongloop/expressjs.com)?\n\nWhat it sounds like you're asking for is a through document of all possible times Express and all of it's dependencies may call `setImmediate` or `setTimeout` so you'll know when you tick fake timers to match, correct? The problem is, no reasonable project would document this, because it's not a public API and would be on the same lines of documenting just every single call and when a library calls something in Nore.js core, since they all have the potential to be overwritten.\n",
    "reactions": {
      "url": "https://api.github.com/repos/expressjs/express/issues/comments/64465501/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/expressjs/express/issues/comments/64497809",
    "html_url": "https://github.com/expressjs/express/issues/2447#issuecomment-64497809",
    "issue_url": "https://api.github.com/repos/expressjs/express/issues/2447",
    "id": 64497809,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0NDk3ODA5",
    "user": {
      "login": "Rovack",
      "id": 6605826,
      "node_id": "MDQ6VXNlcjY2MDU4MjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6605826?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Rovack",
      "html_url": "https://github.com/Rovack",
      "followers_url": "https://api.github.com/users/Rovack/followers",
      "following_url": "https://api.github.com/users/Rovack/following{/other_user}",
      "gists_url": "https://api.github.com/users/Rovack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Rovack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Rovack/subscriptions",
      "organizations_url": "https://api.github.com/users/Rovack/orgs",
      "repos_url": "https://api.github.com/users/Rovack/repos",
      "events_url": "https://api.github.com/users/Rovack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Rovack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-26T00:44:01Z",
    "updated_at": "2014-11-26T00:44:26Z",
    "author_association": "NONE",
    "body": "Oh, I don't think it's necessary to go into all the possible times the call may happen, and I agree it doesn't sound at all realistic.\nI was thinking about more of a general comment, simply stating that in version 4.10.2 a `setImmediate` call was added that now makes tests with fake timers get stuck. This wouldn't let people know when to tick fake timers, it'd just make them aware that there might be a problem and to what it's related.\n\nThough, going by what you're saying here, it sounds like there are many cases where this problem would've already appeared in previous versions.\nThe question is, was the `setImmediate` call in those cases necessary for getting a response from the app? I'm pretty sure the new call actually stopped me from getting one when the app was going to return a plain old 200, so are you sure it should only affect 404/error responses?\n",
    "reactions": {
      "url": "https://api.github.com/repos/expressjs/express/issues/comments/64497809/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/expressjs/express/issues/comments/64500231",
    "html_url": "https://github.com/expressjs/express/issues/2447#issuecomment-64500231",
    "issue_url": "https://api.github.com/repos/expressjs/express/issues/2447",
    "id": 64500231,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0NTAwMjMx",
    "user": {
      "login": "dougwilson",
      "id": 67512,
      "node_id": "MDQ6VXNlcjY3NTEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/67512?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dougwilson",
      "html_url": "https://github.com/dougwilson",
      "followers_url": "https://api.github.com/users/dougwilson/followers",
      "following_url": "https://api.github.com/users/dougwilson/following{/other_user}",
      "gists_url": "https://api.github.com/users/dougwilson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dougwilson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dougwilson/subscriptions",
      "organizations_url": "https://api.github.com/users/dougwilson/orgs",
      "repos_url": "https://api.github.com/users/dougwilson/repos",
      "events_url": "https://api.github.com/users/dougwilson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dougwilson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-26T01:11:53Z",
    "updated_at": "2014-11-26T01:32:34Z",
    "author_association": "MEMBER",
    "body": "> so are you sure it should only affect 404/error responses?\n\nThe answer depends on your app. See https://github.com/strongloop/express/issues/2447#issuecomment-64463596 for a better explanation. If your app consists only of `app` and `app[VERB]` and stuff, then only 404/error. If you use external middleware, then it depends on if that middleware internally uses a router. Also depends on if you are using multiple routers, etc. \n",
    "reactions": {
      "url": "https://api.github.com/repos/expressjs/express/issues/comments/64500231/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/expressjs/express/issues/comments/64501621",
    "html_url": "https://github.com/expressjs/express/issues/2447#issuecomment-64501621",
    "issue_url": "https://api.github.com/repos/expressjs/express/issues/2447",
    "id": 64501621,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0NTAxNjIx",
    "user": {
      "login": "dougwilson",
      "id": 67512,
      "node_id": "MDQ6VXNlcjY3NTEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/67512?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dougwilson",
      "html_url": "https://github.com/dougwilson",
      "followers_url": "https://api.github.com/users/dougwilson/followers",
      "following_url": "https://api.github.com/users/dougwilson/following{/other_user}",
      "gists_url": "https://api.github.com/users/dougwilson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dougwilson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dougwilson/subscriptions",
      "organizations_url": "https://api.github.com/users/dougwilson/orgs",
      "repos_url": "https://api.github.com/users/dougwilson/repos",
      "events_url": "https://api.github.com/users/dougwilson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dougwilson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-26T01:28:35Z",
    "updated_at": "2014-11-26T01:29:48Z",
    "author_association": "MEMBER",
    "body": "So if you post a full `app` and what method and path you are making a call with, I'd be happy to tell you where the `setImmediate` is getting called. Here are a few examples:\n\n``` js\nvar express = require('express')\nvar request = require('supertest')\nvar app = express()\n\n// This invokes setImmediate since it's a default 404\nrequest(app)\n.get('/')\n.end(function(){process.exit()})\n```\n\n``` js\nvar express = require('express')\nvar request = require('supertest')\nvar app = express()\n\napp.get('/', function (req, res) {\n  throw new Error()\n})\n\n// This invokes setImmediate since it's a default error\nrequest(app)\n.get('/')\n.end(function(){process.exit()})\n```\n\n``` js\nvar express = require('express')\nvar request = require('supertest')\nvar app = express()\n\napp.get('/', function (req, res) {\n  res.send('hello, world')\n})\n\n// This never invokes setImmediate\nrequest(app)\n.get('/')\n.end(function(){process.exit()})\n```\n\n``` js\nvar express = require('express')\nvar request = require('supertest')\nvar app = express()\n\napp.use(express.Router())\napp.get('/', function (req, res) {\n  throw new Error()\n})\n\n// This invokes setImmediate since it passes through a router that doesn't handle the request\nrequest(app)\n.get('/')\n.end(function(){process.exit()})\n```\n\n``` js\nvar express = require('express')\nvar request = require('supertest')\nvar app = express()\n\napp.use('/api', express.Router())\napp.get('/', function (req, res) {\n  throw new Error()\n})\n\n// This never invokes setImmediate, since the URL does not invoke the second router\nrequest(app)\n.get('/')\n.end(function(){process.exit()})\n```\n\n``` js\nvar express = require('express')\nvar request = require('supertest')\nvar app = express()\n\napp.get('/', function (req, res) {\n  res.send('hello, world')\n})\napp.use(express.Router())\n\n// This never invokes setImmediate because the second router isn't reached since GET / is handled before it\nrequest(app)\n.get('/')\n.end(function(){process.exit()})\n```\n\n``` js\nvar express = require('express')\nvar request = require('supertest')\nvar app = express()\n\napp.get('/', function (req, res) {\n  throw new Error()\n})\n\napp.use(function (err, req, res, next){\n  res.send('error!')\n})\n\n// This never invokes setImmediate because there was an error handler that responded\nrequest(app)\n.get('/')\n.end(function(){process.exit()})\n```\n\nThere are many more examples I can put, but I hope that helps understand when and when not the `setImmediate` gets invoked by some examples. My offer to tell you when `setImmediate` still stands if you post the full, complete app code.\n",
    "reactions": {
      "url": "https://api.github.com/repos/expressjs/express/issues/comments/64501621/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/expressjs/express/issues/comments/64502581",
    "html_url": "https://github.com/expressjs/express/issues/2447#issuecomment-64502581",
    "issue_url": "https://api.github.com/repos/expressjs/express/issues/2447",
    "id": 64502581,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0NTAyNTgx",
    "user": {
      "login": "dougwilson",
      "id": 67512,
      "node_id": "MDQ6VXNlcjY3NTEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/67512?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dougwilson",
      "html_url": "https://github.com/dougwilson",
      "followers_url": "https://api.github.com/users/dougwilson/followers",
      "following_url": "https://api.github.com/users/dougwilson/following{/other_user}",
      "gists_url": "https://api.github.com/users/dougwilson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dougwilson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dougwilson/subscriptions",
      "organizations_url": "https://api.github.com/users/dougwilson/orgs",
      "repos_url": "https://api.github.com/users/dougwilson/repos",
      "events_url": "https://api.github.com/users/dougwilson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dougwilson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-26T01:39:51Z",
    "updated_at": "2014-11-26T01:39:51Z",
    "author_association": "MEMBER",
    "body": "In the end, we are not going to add a note about this anywhere. I would rather revert the change instead and bring back the critical errors that could have occurred (like errors being reported multiple times, etc.). @bajtos can weigh in, as I believe he had the biggest need for this change and maybe he/StrongLoop can wait until Express 5.0.\n",
    "reactions": {
      "url": "https://api.github.com/repos/expressjs/express/issues/comments/64502581/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/expressjs/express/issues/comments/64503736",
    "html_url": "https://github.com/expressjs/express/issues/2447#issuecomment-64503736",
    "issue_url": "https://api.github.com/repos/expressjs/express/issues/2447",
    "id": 64503736,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0NTAzNzM2",
    "user": {
      "login": "dougwilson",
      "id": 67512,
      "node_id": "MDQ6VXNlcjY3NTEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/67512?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dougwilson",
      "html_url": "https://github.com/dougwilson",
      "followers_url": "https://api.github.com/users/dougwilson/followers",
      "following_url": "https://api.github.com/users/dougwilson/following{/other_user}",
      "gists_url": "https://api.github.com/users/dougwilson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dougwilson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dougwilson/subscriptions",
      "organizations_url": "https://api.github.com/users/dougwilson/orgs",
      "repos_url": "https://api.github.com/users/dougwilson/repos",
      "events_url": "https://api.github.com/users/dougwilson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dougwilson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-26T01:54:16Z",
    "updated_at": "2014-11-26T01:54:16Z",
    "author_association": "MEMBER",
    "body": "@Rovack I see you have a little project at https://github.com/Rovack/deploy-test . Can you tell me a method + path to call that would cause a 200 to call `setImmediate`? Doing `GET /` on your app returns `Hello World.` without invoking `setImmediate`, but that's because it never crosses a router-exit-boundary, which is when the `setImmediate` is called.\n",
    "reactions": {
      "url": "https://api.github.com/repos/expressjs/express/issues/comments/64503736/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/expressjs/express/issues/comments/64509645",
    "html_url": "https://github.com/expressjs/express/issues/2447#issuecomment-64509645",
    "issue_url": "https://api.github.com/repos/expressjs/express/issues/2447",
    "id": 64509645,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0NTA5NjQ1",
    "user": {
      "login": "Rovack",
      "id": 6605826,
      "node_id": "MDQ6VXNlcjY2MDU4MjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6605826?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Rovack",
      "html_url": "https://github.com/Rovack",
      "followers_url": "https://api.github.com/users/Rovack/followers",
      "following_url": "https://api.github.com/users/Rovack/following{/other_user}",
      "gists_url": "https://api.github.com/users/Rovack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Rovack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Rovack/subscriptions",
      "organizations_url": "https://api.github.com/users/Rovack/orgs",
      "repos_url": "https://api.github.com/users/Rovack/repos",
      "events_url": "https://api.github.com/users/Rovack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Rovack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-26T03:19:53Z",
    "updated_at": "2014-11-26T14:35:15Z",
    "author_association": "NONE",
    "body": "Naturally that's not the project to which I was referring. The one I was talking about is in a private company repo, and I'd have to get approval to share it.\nAnyway, I don't think that's necessary, as the multiple routers/middleware explanation makes sense.\n",
    "reactions": {
      "url": "https://api.github.com/repos/expressjs/express/issues/comments/64509645/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/expressjs/express/issues/comments/64528410",
    "html_url": "https://github.com/expressjs/express/issues/2447#issuecomment-64528410",
    "issue_url": "https://api.github.com/repos/expressjs/express/issues/2447",
    "id": 64528410,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0NTI4NDEw",
    "user": {
      "login": "bajtos",
      "id": 1140553,
      "node_id": "MDQ6VXNlcjExNDA1NTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1140553?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bajtos",
      "html_url": "https://github.com/bajtos",
      "followers_url": "https://api.github.com/users/bajtos/followers",
      "following_url": "https://api.github.com/users/bajtos/following{/other_user}",
      "gists_url": "https://api.github.com/users/bajtos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bajtos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bajtos/subscriptions",
      "organizations_url": "https://api.github.com/users/bajtos/orgs",
      "repos_url": "https://api.github.com/users/bajtos/repos",
      "events_url": "https://api.github.com/users/bajtos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bajtos/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-26T08:17:39Z",
    "updated_at": "2014-11-26T08:17:39Z",
    "author_association": "NONE",
    "body": "> In the end, we are not going to add a note about this anywhere. I would rather revert the change instead and bring back the critical errors that could have occurred (like errors being reported multiple times, etc.). @bajtos can weigh in, as I believe he had the biggest need for this change and maybe he/StrongLoop can wait until Express 5.0.\n\nHere is the discussion capturing my needs: https://github.com/strongloop/expressjs.com/issues/270\n\nIn essence, if the callback function passed to `app.handle` throws an error (e.g. via `assert` in unit-tests), the express invokes the callback again with the new error:\n\n``` js\nvar assert = require('assert');\nvar app = require('express')();\napp.use(function(req, res, next) { next(); });\n\nfunction callback(err) {\n  console.log('done', err && err.name + ' ' + err.message || 'ok');\n  // simulate a failing test\n  if (!err) assert(false);\n}\n\nvar server = http.createServer(function(req, res) {\n    app.handle(req, res, callback);\n});\nrequest(server)\n  .get(urlPath)\n  .end(function(err) {\n    if (err) return callback(err);\n  });\n\n// output:\n//   done ok\n//   done AssertionError false == true\n```\n\nHonestly, I don't mind whether the callback is called sync or async, as long as it is called only once. I am sure there is a way how to prevent double invocation while preserving the old sync behaviour?\n\nHowever, if the fix in 4.x would be too difficult to implement and the double invocation problem is already fixed in 5.0 in a more clean way, then I can live with the old behaviour and fix my unit-tests to use `setImmediate` before invoking the callback.\n",
    "reactions": {
      "url": "https://api.github.com/repos/expressjs/express/issues/comments/64528410/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/expressjs/express/issues/comments/64640109",
    "html_url": "https://github.com/expressjs/express/issues/2447#issuecomment-64640109",
    "issue_url": "https://api.github.com/repos/expressjs/express/issues/2447",
    "id": 64640109,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0NjQwMTA5",
    "user": {
      "login": "Fishrock123",
      "id": 1093990,
      "node_id": "MDQ6VXNlcjEwOTM5OTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1093990?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Fishrock123",
      "html_url": "https://github.com/Fishrock123",
      "followers_url": "https://api.github.com/users/Fishrock123/followers",
      "following_url": "https://api.github.com/users/Fishrock123/following{/other_user}",
      "gists_url": "https://api.github.com/users/Fishrock123/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Fishrock123/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Fishrock123/subscriptions",
      "organizations_url": "https://api.github.com/users/Fishrock123/orgs",
      "repos_url": "https://api.github.com/users/Fishrock123/repos",
      "events_url": "https://api.github.com/users/Fishrock123/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Fishrock123/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-26T14:03:39Z",
    "updated_at": "2014-11-26T14:07:20Z",
    "author_association": "MEMBER",
    "body": "> In essence, if the callback function passed to app.handle throws an error (e.g. via assert in unit-tests), the express invokes the callback again with the new error:\n\n~~Oh god no. superagent was bugged up for me doing this and it was terrible.~~\n\n~~`err` should only ever be an error upstream of the call, erroring and re-calling is surprising and inconsistent.~~\n",
    "reactions": {
      "url": "https://api.github.com/repos/expressjs/express/issues/comments/64640109/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/expressjs/express/issues/comments/64644341",
    "html_url": "https://github.com/expressjs/express/issues/2447#issuecomment-64644341",
    "issue_url": "https://api.github.com/repos/expressjs/express/issues/2447",
    "id": 64644341,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0NjQ0MzQx",
    "user": {
      "login": "Fishrock123",
      "id": 1093990,
      "node_id": "MDQ6VXNlcjEwOTM5OTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1093990?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Fishrock123",
      "html_url": "https://github.com/Fishrock123",
      "followers_url": "https://api.github.com/users/Fishrock123/followers",
      "following_url": "https://api.github.com/users/Fishrock123/following{/other_user}",
      "gists_url": "https://api.github.com/users/Fishrock123/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Fishrock123/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Fishrock123/subscriptions",
      "organizations_url": "https://api.github.com/users/Fishrock123/orgs",
      "repos_url": "https://api.github.com/users/Fishrock123/repos",
      "events_url": "https://api.github.com/users/Fishrock123/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Fishrock123/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-26T14:07:13Z",
    "updated_at": "2014-11-26T14:08:09Z",
    "author_association": "MEMBER",
    "body": "**EDIT**: Oh ok, I thought the functionality was being changed to do that. It was fixed, all is good.\n\n> Honestly, I don't mind whether the callback is called sync or async, as long as it is called only once. I am sure there is a way how to prevent double invocation while preserving the old sync behaviour?\n\nYeah this. (unless async has some benefits that I am unaware of.)\n",
    "reactions": {
      "url": "https://api.github.com/repos/expressjs/express/issues/comments/64644341/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/expressjs/express/issues/comments/64651285",
    "html_url": "https://github.com/expressjs/express/issues/2447#issuecomment-64651285",
    "issue_url": "https://api.github.com/repos/expressjs/express/issues/2447",
    "id": 64651285,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0NjUxMjg1",
    "user": {
      "login": "dougwilson",
      "id": 67512,
      "node_id": "MDQ6VXNlcjY3NTEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/67512?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dougwilson",
      "html_url": "https://github.com/dougwilson",
      "followers_url": "https://api.github.com/users/dougwilson/followers",
      "following_url": "https://api.github.com/users/dougwilson/following{/other_user}",
      "gists_url": "https://api.github.com/users/dougwilson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dougwilson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dougwilson/subscriptions",
      "organizations_url": "https://api.github.com/users/dougwilson/orgs",
      "repos_url": "https://api.github.com/users/dougwilson/repos",
      "events_url": "https://api.github.com/users/dougwilson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dougwilson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-26T14:18:09Z",
    "updated_at": "2014-11-26T14:18:09Z",
    "author_association": "MEMBER",
    "body": "Async is the only possible solution, otherwise either the error is lost into oblivion and never thrown, since the call stack will have dozens of trys. Invoking the callback async (as is the node.js promise anyways and does not release zalgo) is the best solution to not double-invoking and not losing the error into oblivion.\n\nReally, before this was fixed, I could only image the production hair-pulling multiple error invocation would have caused, especially when it used to also loose errors in some cases.\n",
    "reactions": {
      "url": "https://api.github.com/repos/expressjs/express/issues/comments/64651285/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/expressjs/express/issues/comments/64651598",
    "html_url": "https://github.com/expressjs/express/issues/2447#issuecomment-64651598",
    "issue_url": "https://api.github.com/repos/expressjs/express/issues/2447",
    "id": 64651598,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0NjUxNTk4",
    "user": {
      "login": "Fishrock123",
      "id": 1093990,
      "node_id": "MDQ6VXNlcjEwOTM5OTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1093990?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Fishrock123",
      "html_url": "https://github.com/Fishrock123",
      "followers_url": "https://api.github.com/users/Fishrock123/followers",
      "following_url": "https://api.github.com/users/Fishrock123/following{/other_user}",
      "gists_url": "https://api.github.com/users/Fishrock123/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Fishrock123/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Fishrock123/subscriptions",
      "organizations_url": "https://api.github.com/users/Fishrock123/orgs",
      "repos_url": "https://api.github.com/users/Fishrock123/repos",
      "events_url": "https://api.github.com/users/Fishrock123/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Fishrock123/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-26T14:20:34Z",
    "updated_at": "2014-11-26T14:20:55Z",
    "author_association": "MEMBER",
    "body": "> Really, before this was fixed, I could only image the production hair-pulling multiple error invocation would have caused, especially when it used to also loose errors in some cases\n\nYes. This is definitely no going to warrant reverting that fix.\n",
    "reactions": {
      "url": "https://api.github.com/repos/expressjs/express/issues/comments/64651598/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
[
  {
    "url": "https://api.github.com/repos/expressjs/express/issues/comments/55128379",
    "html_url": "https://github.com/expressjs/express/issues/2352#issuecomment-55128379",
    "issue_url": "https://api.github.com/repos/expressjs/express/issues/2352",
    "id": 55128379,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1MTI4Mzc5",
    "user": {
      "login": "dougwilson",
      "id": 67512,
      "node_id": "MDQ6VXNlcjY3NTEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/67512?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dougwilson",
      "html_url": "https://github.com/dougwilson",
      "followers_url": "https://api.github.com/users/dougwilson/followers",
      "following_url": "https://api.github.com/users/dougwilson/following{/other_user}",
      "gists_url": "https://api.github.com/users/dougwilson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dougwilson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dougwilson/subscriptions",
      "organizations_url": "https://api.github.com/users/dougwilson/orgs",
      "repos_url": "https://api.github.com/users/dougwilson/repos",
      "events_url": "https://api.github.com/users/dougwilson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dougwilson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-10T15:00:57Z",
    "updated_at": "2014-09-10T15:00:57Z",
    "author_association": "MEMBER",
    "body": "Unfortunately express is just _too flexible_ here. For example, people can do all the following:\n\n``` js\napp.use('/orange', router)\napp.use(/^\\/apples?(?:\\/|$)/, router)\napp.use(['/apples', '/bananas'], router)\napp.use(function (req, res, next) {\n  if (req.url.indexOf('/apple/') !== 0) return next()\n  router(req, res, next)\n})\n// and others\n// i haven't even gone into case-sensitivity settings, strict routing settings, etc.\n```\n\nhttps://github.com/krakenjs/express-enrouten may be a better fit for you.\n",
    "reactions": {
      "url": "https://api.github.com/repos/expressjs/express/issues/comments/55128379/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/expressjs/express/issues/comments/55130467",
    "html_url": "https://github.com/expressjs/express/issues/2352#issuecomment-55130467",
    "issue_url": "https://api.github.com/repos/expressjs/express/issues/2352",
    "id": 55130467,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1MTMwNDY3",
    "user": {
      "login": "sixlettervariables",
      "id": 8238690,
      "node_id": "MDQ6VXNlcjgyMzg2OTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8238690?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sixlettervariables",
      "html_url": "https://github.com/sixlettervariables",
      "followers_url": "https://api.github.com/users/sixlettervariables/followers",
      "following_url": "https://api.github.com/users/sixlettervariables/following{/other_user}",
      "gists_url": "https://api.github.com/users/sixlettervariables/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sixlettervariables/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sixlettervariables/subscriptions",
      "organizations_url": "https://api.github.com/users/sixlettervariables/orgs",
      "repos_url": "https://api.github.com/users/sixlettervariables/repos",
      "events_url": "https://api.github.com/users/sixlettervariables/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sixlettervariables/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-10T15:14:42Z",
    "updated_at": "2014-09-10T15:14:42Z",
    "author_association": "NONE",
    "body": "Or https://github.com/krakenjs/swaggerize-express (looking at the referenced issue)\n",
    "reactions": {
      "url": "https://api.github.com/repos/expressjs/express/issues/comments/55130467/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/expressjs/express/issues/comments/55143279",
    "html_url": "https://github.com/expressjs/express/issues/2352#issuecomment-55143279",
    "issue_url": "https://api.github.com/repos/expressjs/express/issues/2352",
    "id": 55143279,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1MTQzMjc5",
    "user": {
      "login": "hans-d",
      "id": 46201,
      "node_id": "MDQ6VXNlcjQ2MjAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/46201?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hans-d",
      "html_url": "https://github.com/hans-d",
      "followers_url": "https://api.github.com/users/hans-d/followers",
      "following_url": "https://api.github.com/users/hans-d/following{/other_user}",
      "gists_url": "https://api.github.com/users/hans-d/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hans-d/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hans-d/subscriptions",
      "organizations_url": "https://api.github.com/users/hans-d/orgs",
      "repos_url": "https://api.github.com/users/hans-d/repos",
      "events_url": "https://api.github.com/users/hans-d/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hans-d/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-10T16:35:06Z",
    "updated_at": "2014-09-10T16:35:06Z",
    "author_association": "NONE",
    "body": "@dougwilson I understand there is a lot of options possible. I'm not looking for all the possible combinations, only the string provided.\n\n@sixlettervariables that lib works the other way around (combining existing spec/documentation and routes (eg adding middleware) vs generating the spec/documentation from the routes + added middleware).\n",
    "reactions": {
      "url": "https://api.github.com/repos/expressjs/express/issues/comments/55143279/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/expressjs/express/issues/comments/55147904",
    "html_url": "https://github.com/expressjs/express/issues/2352#issuecomment-55147904",
    "issue_url": "https://api.github.com/repos/expressjs/express/issues/2352",
    "id": 55147904,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1MTQ3OTA0",
    "user": {
      "login": "dougwilson",
      "id": 67512,
      "node_id": "MDQ6VXNlcjY3NTEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/67512?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dougwilson",
      "html_url": "https://github.com/dougwilson",
      "followers_url": "https://api.github.com/users/dougwilson/followers",
      "following_url": "https://api.github.com/users/dougwilson/following{/other_user}",
      "gists_url": "https://api.github.com/users/dougwilson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dougwilson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dougwilson/subscriptions",
      "organizations_url": "https://api.github.com/users/dougwilson/orgs",
      "repos_url": "https://api.github.com/users/dougwilson/repos",
      "events_url": "https://api.github.com/users/dougwilson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dougwilson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-10T17:08:23Z",
    "updated_at": "2014-09-10T17:08:23Z",
    "author_association": "MEMBER",
    "body": "> only the string provided\n\nyes, but people can provide non-strings. so you're saying you want to be able to get the string or regexp or array people provided, is that right? also, you want to know if the string was set to be case-sensitive, right? also, settings can make the ending slash in the string significant or not, so you also need that exposed, correct? there is a lot of stuff going on. The `regexp` value is of course the canonical representation of the path after all these options have been considered.\n\nwhat is your use-case? the main issue is, we cannot have a half-way-done public API. it has to support _all_ cases or not exist (it doesn't exist today). i would be happy to accept a PR as long as it provides some kind of consistent way to handle all these cases.\n\nthe `path` inside the route you are referencing is not public, of course, and it is also not always a string (and of course, you can't tell from that if it's case-sensitive or not, but if you're just echoing it, I guess that does not matter; it doesn't tell you if there is an optional slash at the end or not, though).\n",
    "reactions": {
      "url": "https://api.github.com/repos/expressjs/express/issues/comments/55147904/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/expressjs/express/issues/comments/55156038",
    "html_url": "https://github.com/expressjs/express/issues/2352#issuecomment-55156038",
    "issue_url": "https://api.github.com/repos/expressjs/express/issues/2352",
    "id": 55156038,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1MTU2MDM4",
    "user": {
      "login": "hans-d",
      "id": 46201,
      "node_id": "MDQ6VXNlcjQ2MjAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/46201?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hans-d",
      "html_url": "https://github.com/hans-d",
      "followers_url": "https://api.github.com/users/hans-d/followers",
      "following_url": "https://api.github.com/users/hans-d/following{/other_user}",
      "gists_url": "https://api.github.com/users/hans-d/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hans-d/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hans-d/subscriptions",
      "organizations_url": "https://api.github.com/users/hans-d/orgs",
      "repos_url": "https://api.github.com/users/hans-d/repos",
      "events_url": "https://api.github.com/users/hans-d/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hans-d/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-10T18:03:15Z",
    "updated_at": "2014-09-10T18:03:15Z",
    "author_association": "NONE",
    "body": "My case: documenting a rest api (for swagger), when additional info is provided as middelware. Eg https://github.com/nomiddlename/flair/blob/master/example.js (nb: this one is working, as it uses only an app, also when just a router is used and before it gets used, this works ok).\n\nThe normal routes (as set directly on an app or router object) are already covered (naming convention is restricted).\nCurrently missing: if the router, where such a route is defined, is mounted via `app.use`, I only have the regex to get to the name. When comparing it to `app.get('/plainname', fn)`, where the plainname is provided in the resulting app, where for `app.use` it is missing.\n\nIn this case: if the first argument for `app.use` is not a function (and the second is a router) I want to be able to lookup the original value of the first argument. No need for additional processing or additional information. If the first value is directly the router, then it can stay as undefined\nSimilar to how `app.get` behaves\n\nAs a workaround I can (for now) use the regex to try to guess the value supplied (and throw when it is more as a plain route name)....\n",
    "reactions": {
      "url": "https://api.github.com/repos/expressjs/express/issues/comments/55156038/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/expressjs/express/issues/comments/55158696",
    "html_url": "https://github.com/expressjs/express/issues/2352#issuecomment-55158696",
    "issue_url": "https://api.github.com/repos/expressjs/express/issues/2352",
    "id": 55158696,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1MTU4Njk2",
    "user": {
      "login": "dougwilson",
      "id": 67512,
      "node_id": "MDQ6VXNlcjY3NTEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/67512?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dougwilson",
      "html_url": "https://github.com/dougwilson",
      "followers_url": "https://api.github.com/users/dougwilson/followers",
      "following_url": "https://api.github.com/users/dougwilson/following{/other_user}",
      "gists_url": "https://api.github.com/users/dougwilson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dougwilson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dougwilson/subscriptions",
      "organizations_url": "https://api.github.com/users/dougwilson/orgs",
      "repos_url": "https://api.github.com/users/dougwilson/repos",
      "events_url": "https://api.github.com/users/dougwilson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dougwilson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-10T18:20:53Z",
    "updated_at": "2014-09-10T18:20:53Z",
    "author_association": "MEMBER",
    "body": "The main problem is all the things you are referring to are undocumented internals. Adding a new, undocumented internal as a feature request does not make sense. If I'm going to add something, it would be something that is a public API and it needs to work consistently, etc. Like I said, I would be happy to accept a PR as long as it provides some kind of consistent way to handle all these cases, which is a requirement for a public API. The logs you have in your original post are all of internals that are undocumented and are not intended for public consumption.\n",
    "reactions": {
      "url": "https://api.github.com/repos/expressjs/express/issues/comments/55158696/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
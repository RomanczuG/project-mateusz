[
  {
    "url": "https://api.github.com/repos/expressjs/express/issues/comments/142148081",
    "html_url": "https://github.com/expressjs/express/issues/2760#issuecomment-142148081",
    "issue_url": "https://api.github.com/repos/expressjs/express/issues/2760",
    "id": 142148081,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0MjE0ODA4MQ==",
    "user": {
      "login": "dougwilson",
      "id": 67512,
      "node_id": "MDQ6VXNlcjY3NTEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/67512?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dougwilson",
      "html_url": "https://github.com/dougwilson",
      "followers_url": "https://api.github.com/users/dougwilson/followers",
      "following_url": "https://api.github.com/users/dougwilson/following{/other_user}",
      "gists_url": "https://api.github.com/users/dougwilson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dougwilson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dougwilson/subscriptions",
      "organizations_url": "https://api.github.com/users/dougwilson/orgs",
      "repos_url": "https://api.github.com/users/dougwilson/repos",
      "events_url": "https://api.github.com/users/dougwilson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dougwilson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-22T00:44:55Z",
    "updated_at": "2015-09-22T00:44:55Z",
    "author_association": "MEMBER",
    "body": "Hi! Yes, this is currently intended behavior in Express 4, but is open to change if you can whip up a PR for us :) The reason this happens is because Express 4's router is a simple stack; without executing the middleware in router1, Express has no way to know how to proceed, because that middleware may modify `req.method`, `req.url` or something else that modifies routing behavior.\n",
    "reactions": {
      "url": "https://api.github.com/repos/expressjs/express/issues/comments/142148081/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/expressjs/express/issues/comments/142148508",
    "html_url": "https://github.com/expressjs/express/issues/2760#issuecomment-142148508",
    "issue_url": "https://api.github.com/repos/expressjs/express/issues/2760",
    "id": 142148508,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0MjE0ODUwOA==",
    "user": {
      "login": "dougwilson",
      "id": 67512,
      "node_id": "MDQ6VXNlcjY3NTEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/67512?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dougwilson",
      "html_url": "https://github.com/dougwilson",
      "followers_url": "https://api.github.com/users/dougwilson/followers",
      "following_url": "https://api.github.com/users/dougwilson/following{/other_user}",
      "gists_url": "https://api.github.com/users/dougwilson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dougwilson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dougwilson/subscriptions",
      "organizations_url": "https://api.github.com/users/dougwilson/orgs",
      "repos_url": "https://api.github.com/users/dougwilson/repos",
      "events_url": "https://api.github.com/users/dougwilson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dougwilson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-22T00:49:18Z",
    "updated_at": "2015-09-22T00:49:18Z",
    "author_association": "MEMBER",
    "body": "P.S., also feel free to open a PR at https://github.com/strongloop/expressjs.com to help document this behavior to your satisfaction, to help others who may run into the same surprise. Since Express 5 is not yet released, Express 5 is open to change. You can also always use another router module or your own router that behaves off something other than strict linear path matching.\n",
    "reactions": {
      "url": "https://api.github.com/repos/expressjs/express/issues/comments/142148508/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/expressjs/express/issues/comments/142160805",
    "html_url": "https://github.com/expressjs/express/issues/2760#issuecomment-142160805",
    "issue_url": "https://api.github.com/repos/expressjs/express/issues/2760",
    "id": 142160805,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0MjE2MDgwNQ==",
    "user": {
      "login": "mjm",
      "id": 1181,
      "node_id": "MDQ6VXNlcjExODE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1181?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mjm",
      "html_url": "https://github.com/mjm",
      "followers_url": "https://api.github.com/users/mjm/followers",
      "following_url": "https://api.github.com/users/mjm/following{/other_user}",
      "gists_url": "https://api.github.com/users/mjm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mjm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mjm/subscriptions",
      "organizations_url": "https://api.github.com/users/mjm/orgs",
      "repos_url": "https://api.github.com/users/mjm/repos",
      "events_url": "https://api.github.com/users/mjm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mjm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-22T02:24:37Z",
    "updated_at": "2015-09-22T02:24:37Z",
    "author_association": "NONE",
    "body": "Ah, that's disappointing. Basically, all I'm trying to do is go from:\n\n```\napp.get(foo, bar);\napp.post(foo, baz);\n```\n\nto being able to not repeat `foo` so many times. Is there any built-in way in Express to (for lack of a better word) express this, whether it be with routers or not? I'm not really interested in using a different router module. If there's no way to do it, I'll just go back to mostly using what we had before, putting the middleware on each route. I appreciate the response, nonetheless.\n\nAnd for what it's worth, my vote would be for this to be possible in Express 5 :)\n",
    "reactions": {
      "url": "https://api.github.com/repos/expressjs/express/issues/comments/142160805/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/expressjs/express/issues/comments/142162428",
    "html_url": "https://github.com/expressjs/express/issues/2760#issuecomment-142162428",
    "issue_url": "https://api.github.com/repos/expressjs/express/issues/2760",
    "id": 142162428,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0MjE2MjQyOA==",
    "user": {
      "login": "dougwilson",
      "id": 67512,
      "node_id": "MDQ6VXNlcjY3NTEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/67512?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dougwilson",
      "html_url": "https://github.com/dougwilson",
      "followers_url": "https://api.github.com/users/dougwilson/followers",
      "following_url": "https://api.github.com/users/dougwilson/following{/other_user}",
      "gists_url": "https://api.github.com/users/dougwilson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dougwilson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dougwilson/subscriptions",
      "organizations_url": "https://api.github.com/users/dougwilson/orgs",
      "repos_url": "https://api.github.com/users/dougwilson/repos",
      "events_url": "https://api.github.com/users/dougwilson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dougwilson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-22T02:34:27Z",
    "updated_at": "2015-09-22T02:34:27Z",
    "author_association": "MEMBER",
    "body": "Would `app.route` (http://expressjs.com/4x/api.html#app.route) fit the bill here? For your example, you can do the following:\n\n``` js\n// assuming \"foo\" is a variable to a path:\napp.route(foo)\n.get(bar)\n.post(baz)\n\n// OR assuming \"foo\" is a middleware:\napp.route('/foo')\n.all(foo)\n.get(bar)\n.post(baz)\n```\n\nI could potentially find a good solution, but that example isn't the easiest to understand what you are trying trying to do :) If you provide the real use-case, that would help a lot, especially if there isn't a solution and one needs to be added here (and you're not up to making a PR). Let us help you :)\n",
    "reactions": {
      "url": "https://api.github.com/repos/expressjs/express/issues/comments/142162428/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/expressjs/express/issues/comments/142202165",
    "html_url": "https://github.com/expressjs/express/issues/2760#issuecomment-142202165",
    "issue_url": "https://api.github.com/repos/expressjs/express/issues/2760",
    "id": 142202165,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0MjIwMjE2NQ==",
    "user": {
      "login": "mjm",
      "id": 1181,
      "node_id": "MDQ6VXNlcjExODE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1181?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mjm",
      "html_url": "https://github.com/mjm",
      "followers_url": "https://api.github.com/users/mjm/followers",
      "following_url": "https://api.github.com/users/mjm/following{/other_user}",
      "gists_url": "https://api.github.com/users/mjm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mjm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mjm/subscriptions",
      "organizations_url": "https://api.github.com/users/mjm/orgs",
      "repos_url": "https://api.github.com/users/mjm/repos",
      "events_url": "https://api.github.com/users/mjm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mjm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-22T07:31:51Z",
    "updated_at": "2015-09-22T07:31:51Z",
    "author_association": "NONE",
    "body": "Your second example is correct, I left the path off my example by accident. As far as I can tell, `app.route` will help some, but not all of the repetition. In the cases, where I do have multiple methods for the same URL, your second example is very similar to what I've done.\n\nWhat I was hoping to achieve was a grouping of routes that, independent of their path, could all have a common middleware applied to them, without repeating the middleware for each one. I'm sorry, I don't think I can be much more specific than that.\n\nFrom what I can tell, though, it appears there are exactly two ways to control what middleware is applied:\n- Using a path to scope it down (using either router.all or router.use)\n- Using ordering\n\nI somewhat understand why Express works the way it works now. Since there is so much flexibility in where a request will end up, it's hard to do this logical grouping in a way that makes sense, since I could go all the way through a route and then never actually finish the request there, instead leaving it to some subsequent route, possibly from another router. It's hard to tell what would happen there. That said, given I've structured my app in such a way that all my routes finish their requests, it seems straightforward enough to want to be able to do all the path filtering _first_, then see what middleware applies to the route that was chosen (and exclude the middleware from other routers).\n",
    "reactions": {
      "url": "https://api.github.com/repos/expressjs/express/issues/comments/142202165/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/expressjs/express/issues/comments/164035553",
    "html_url": "https://github.com/expressjs/express/issues/2760#issuecomment-164035553",
    "issue_url": "https://api.github.com/repos/expressjs/express/issues/2760",
    "id": 164035553,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2NDAzNTU1Mw==",
    "user": {
      "login": "andrewosh",
      "id": 1043263,
      "node_id": "MDQ6VXNlcjEwNDMyNjM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1043263?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/andrewosh",
      "html_url": "https://github.com/andrewosh",
      "followers_url": "https://api.github.com/users/andrewosh/followers",
      "following_url": "https://api.github.com/users/andrewosh/following{/other_user}",
      "gists_url": "https://api.github.com/users/andrewosh/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/andrewosh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/andrewosh/subscriptions",
      "organizations_url": "https://api.github.com/users/andrewosh/orgs",
      "repos_url": "https://api.github.com/users/andrewosh/repos",
      "events_url": "https://api.github.com/users/andrewosh/events{/privacy}",
      "received_events_url": "https://api.github.com/users/andrewosh/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-12-11T20:03:30Z",
    "updated_at": "2015-12-11T20:03:30Z",
    "author_association": "NONE",
    "body": "Just want to leave my :+1: here. Let me know if there's something I'm doing wrong, but my use case is: \n1. I have two routers, one uses some authorization middleware and the other does not require authorization\n2. Both routers are mounted on the same path, and they might be responsible for handling different methods on the same endpoint\n\nIn this scenario, I'm seeing that the authorization middleware is being applied to the route/methods being handled by the second router as well. To be more specific, in the following chunk of code, authorization is being applied to the routes in `openRouter` as well: \n\n```\nvar authRouter = express.Router()\nauthRouter.use(authHandler)\nvar openRouter = express.Router()\n\nauthRouter.route('/applications/:template')\n  .get(this.cluster.getAllApplications.bind(this.cluster))\nopenRouter.route('/applications/:template')\n  .post(this.cluster.createApplication.bind(this.cluster))\n\napp.use('/', openRouter)\napp.use('/', authRouter)\n```\n\nAny thoughts on this? \n",
    "reactions": {
      "url": "https://api.github.com/repos/expressjs/express/issues/comments/164035553/reactions",
      "total_count": 9,
      "+1": 9,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/expressjs/express/issues/comments/164084123",
    "html_url": "https://github.com/expressjs/express/issues/2760#issuecomment-164084123",
    "issue_url": "https://api.github.com/repos/expressjs/express/issues/2760",
    "id": 164084123,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2NDA4NDEyMw==",
    "user": {
      "login": "dougwilson",
      "id": 67512,
      "node_id": "MDQ6VXNlcjY3NTEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/67512?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dougwilson",
      "html_url": "https://github.com/dougwilson",
      "followers_url": "https://api.github.com/users/dougwilson/followers",
      "following_url": "https://api.github.com/users/dougwilson/following{/other_user}",
      "gists_url": "https://api.github.com/users/dougwilson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dougwilson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dougwilson/subscriptions",
      "organizations_url": "https://api.github.com/users/dougwilson/orgs",
      "repos_url": "https://api.github.com/users/dougwilson/repos",
      "events_url": "https://api.github.com/users/dougwilson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dougwilson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-12-11T23:56:58Z",
    "updated_at": "2015-12-11T23:56:58Z",
    "author_association": "MEMBER",
    "body": "At @andrewosh , you are just describing the issue here. There is no solution except mounting your two routers on non-conflicting routes or you have to push down the `authHandler` to the route-level. Effectively, all Express currently does is generate a completely linear route stack. This means your given code above turns into the following:\n\n```\nPOST /applications/:template -> cluster.createApplication()\nANY / -> authHandler\nGET /applications/:template -> cluster.getAllApplications()\n```\n\nSo because all router is currently is basically a grouping, the code above is simply mounting `authHandler` at the path `/*` for all methods between the two routers, thus why it's called, regardless of if there are any matching routes within `authRouter`. Because middleware are allowed to alter the request path, method, etc., we cannot even know if the request matches a path without executing all prior middleware in case they alter the state of the request (this supports things like path rewrite, method overrides, etc.).\n",
    "reactions": {
      "url": "https://api.github.com/repos/expressjs/express/issues/comments/164084123/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/expressjs/express/issues/comments/173667066",
    "html_url": "https://github.com/expressjs/express/issues/2760#issuecomment-173667066",
    "issue_url": "https://api.github.com/repos/expressjs/express/issues/2760",
    "id": 173667066,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3MzY2NzA2Ng==",
    "user": {
      "login": "ericuldall",
      "id": 3223296,
      "node_id": "MDQ6VXNlcjMyMjMyOTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3223296?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ericuldall",
      "html_url": "https://github.com/ericuldall",
      "followers_url": "https://api.github.com/users/ericuldall/followers",
      "following_url": "https://api.github.com/users/ericuldall/following{/other_user}",
      "gists_url": "https://api.github.com/users/ericuldall/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ericuldall/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ericuldall/subscriptions",
      "organizations_url": "https://api.github.com/users/ericuldall/orgs",
      "repos_url": "https://api.github.com/users/ericuldall/repos",
      "events_url": "https://api.github.com/users/ericuldall/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ericuldall/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-21T18:34:16Z",
    "updated_at": "2016-02-18T18:50:04Z",
    "author_association": "NONE",
    "body": "I'm having the same or a similar issue. It seems that we should be able to treat routers as encapsulated call stacks that extend the parent app functionality yet work independent of each other.\n\nI think the problem is that the new routing is attached to the app via `app.use()`, so each router must be traversed in the order it was 'use'd by the app. (please correct me if i'm wrong)\n\nPerhaps the solution is to no longer  treat routers as their own middleware and rather create a new more specific implementation for attaching routers to the stack. I do believe this functionality is well warranted.\n",
    "reactions": {
      "url": "https://api.github.com/repos/expressjs/express/issues/comments/173667066/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/expressjs/express/issues/comments/174598205",
    "html_url": "https://github.com/expressjs/express/issues/2760#issuecomment-174598205",
    "issue_url": "https://api.github.com/repos/expressjs/express/issues/2760",
    "id": 174598205,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3NDU5ODIwNQ==",
    "user": {
      "login": "frankxw",
      "id": 6488033,
      "node_id": "MDQ6VXNlcjY0ODgwMzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6488033?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/frankxw",
      "html_url": "https://github.com/frankxw",
      "followers_url": "https://api.github.com/users/frankxw/followers",
      "following_url": "https://api.github.com/users/frankxw/following{/other_user}",
      "gists_url": "https://api.github.com/users/frankxw/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/frankxw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/frankxw/subscriptions",
      "organizations_url": "https://api.github.com/users/frankxw/orgs",
      "repos_url": "https://api.github.com/users/frankxw/repos",
      "events_url": "https://api.github.com/users/frankxw/events{/privacy}",
      "received_events_url": "https://api.github.com/users/frankxw/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-25T17:39:56Z",
    "updated_at": "2016-01-25T17:39:56Z",
    "author_association": "NONE",
    "body": "Would my suggested changes in #2828 be of use for you guys?  It doesn't make routers an isolated stack, but it does enable a shared stack to be used by each route within a router.\n",
    "reactions": {
      "url": "https://api.github.com/repos/expressjs/express/issues/comments/174598205/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/expressjs/express/issues/comments/185855318",
    "html_url": "https://github.com/expressjs/express/issues/2760#issuecomment-185855318",
    "issue_url": "https://api.github.com/repos/expressjs/express/issues/2760",
    "id": 185855318,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4NTg1NTMxOA==",
    "user": {
      "login": "Tomino2112",
      "id": 1140217,
      "node_id": "MDQ6VXNlcjExNDAyMTc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1140217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Tomino2112",
      "html_url": "https://github.com/Tomino2112",
      "followers_url": "https://api.github.com/users/Tomino2112/followers",
      "following_url": "https://api.github.com/users/Tomino2112/following{/other_user}",
      "gists_url": "https://api.github.com/users/Tomino2112/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Tomino2112/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Tomino2112/subscriptions",
      "organizations_url": "https://api.github.com/users/Tomino2112/orgs",
      "repos_url": "https://api.github.com/users/Tomino2112/repos",
      "events_url": "https://api.github.com/users/Tomino2112/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Tomino2112/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-18T18:47:40Z",
    "updated_at": "2016-02-18T18:47:48Z",
    "author_association": "NONE",
    "body": "I think this is an issue for quite a few people, logically `Router.use()` should isolate the middlewares just to its own scope otherwise it becomes `app.use()` and it goes out of its scope. \n\nAlso please see this: http://stackoverflow.com/questions/35489372/expressjs-applying-middleware-only-to-routes-in-router\n\n@demalus suggestion sounds good\n",
    "reactions": {
      "url": "https://api.github.com/repos/expressjs/express/issues/comments/185855318/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/expressjs/express/issues/comments/190202285",
    "html_url": "https://github.com/expressjs/express/issues/2760#issuecomment-190202285",
    "issue_url": "https://api.github.com/repos/expressjs/express/issues/2760",
    "id": 190202285,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE5MDIwMjI4NQ==",
    "user": {
      "login": "hacksparrow",
      "id": 950112,
      "node_id": "MDQ6VXNlcjk1MDExMg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/950112?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hacksparrow",
      "html_url": "https://github.com/hacksparrow",
      "followers_url": "https://api.github.com/users/hacksparrow/followers",
      "following_url": "https://api.github.com/users/hacksparrow/following{/other_user}",
      "gists_url": "https://api.github.com/users/hacksparrow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hacksparrow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hacksparrow/subscriptions",
      "organizations_url": "https://api.github.com/users/hacksparrow/orgs",
      "repos_url": "https://api.github.com/users/hacksparrow/repos",
      "events_url": "https://api.github.com/users/hacksparrow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hacksparrow/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-29T13:05:43Z",
    "updated_at": "2016-02-29T13:05:43Z",
    "author_association": "MEMBER",
    "body": "Sounds like a useful feature expectation. Let's take the discussion to the router middleware repo - https://github.com/pillarjs/router/issues/38.\n",
    "reactions": {
      "url": "https://api.github.com/repos/expressjs/express/issues/comments/190202285/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/expressjs/express/issues/comments/663614947",
    "html_url": "https://github.com/expressjs/express/issues/2760#issuecomment-663614947",
    "issue_url": "https://api.github.com/repos/expressjs/express/issues/2760",
    "id": 663614947,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MzYxNDk0Nw==",
    "user": {
      "login": "kevinclarkadstech",
      "id": 32110119,
      "node_id": "MDQ6VXNlcjMyMTEwMTE5",
      "avatar_url": "https://avatars.githubusercontent.com/u/32110119?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kevinclarkadstech",
      "html_url": "https://github.com/kevinclarkadstech",
      "followers_url": "https://api.github.com/users/kevinclarkadstech/followers",
      "following_url": "https://api.github.com/users/kevinclarkadstech/following{/other_user}",
      "gists_url": "https://api.github.com/users/kevinclarkadstech/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kevinclarkadstech/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kevinclarkadstech/subscriptions",
      "organizations_url": "https://api.github.com/users/kevinclarkadstech/orgs",
      "repos_url": "https://api.github.com/users/kevinclarkadstech/repos",
      "events_url": "https://api.github.com/users/kevinclarkadstech/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kevinclarkadstech/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-24T16:11:15Z",
    "updated_at": "2020-07-27T03:47:07Z",
    "author_association": "NONE",
    "body": "Wow this is still an issue???  I thought I could get around this like:\r\n\r\n`\r\nconst unauthenticatedRouter = Router();\r\nconst authenticatedRouter = Router();\r\nauthenticatedRouter.use((req, res, next) => {\r\n    if (!req.header('auth-token')) {\r\n        return res.status(401).send();\r\n    }\r\n    next();\r\n});\r\n\r\napp.use('/api', authenticatedRouter, unauthenticatedRouter);\r\n`\r\n\r\nSeems like a common use case.  But calling a route with unauthenticated router it still goes into the middleware.  Any update on this @hacksparrow ?  ",
    "reactions": {
      "url": "https://api.github.com/repos/expressjs/express/issues/comments/663614947/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/expressjs/express/issues/comments/663655089",
    "html_url": "https://github.com/expressjs/express/issues/2760#issuecomment-663655089",
    "issue_url": "https://api.github.com/repos/expressjs/express/issues/2760",
    "id": 663655089,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MzY1NTA4OQ==",
    "user": {
      "login": "kevinclarkadstech",
      "id": 32110119,
      "node_id": "MDQ6VXNlcjMyMTEwMTE5",
      "avatar_url": "https://avatars.githubusercontent.com/u/32110119?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kevinclarkadstech",
      "html_url": "https://github.com/kevinclarkadstech",
      "followers_url": "https://api.github.com/users/kevinclarkadstech/followers",
      "following_url": "https://api.github.com/users/kevinclarkadstech/following{/other_user}",
      "gists_url": "https://api.github.com/users/kevinclarkadstech/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kevinclarkadstech/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kevinclarkadstech/subscriptions",
      "organizations_url": "https://api.github.com/users/kevinclarkadstech/orgs",
      "repos_url": "https://api.github.com/users/kevinclarkadstech/repos",
      "events_url": "https://api.github.com/users/kevinclarkadstech/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kevinclarkadstech/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-24T17:44:26Z",
    "updated_at": "2020-07-27T03:47:12Z",
    "author_association": "NONE",
    "body": "> Wow this is still an issue??? I thought I could get around this like:\r\n> \r\n> `const unauthenticatedRouter = Router(); const authenticatedRouter = Router(); authenticatedRouter.use((req, res, next) => { if (!req.header('auth-token')) { return res.status(401).send(); } next(); })`\r\n> \r\n> Seems like a common use case. But calling a route with unauthenticated router it still goes into the middleware. Any update on this @hacksparrow ?\r\n\r\nI see if I declare it this way I seem to get the functionality I expect:\r\n\r\n`app.use('/api', unauthenticatedRouter);\r\n    app.use('/api', authenticatedRouter);`\r\n\r\nJust if anyone stumbles upon this who is having the same issue.",
    "reactions": {
      "url": "https://api.github.com/repos/expressjs/express/issues/comments/663655089/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]